from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

import app.products_menu.keyboard as kb
from app.states import Product
from app.database.requests import add_product, get_products, get_product, change_product_data

products_menu = Router()


# –†–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤
@products_menu.callback_query(F.data == 'products_menu')
async def products_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text='<b>–ú–ï–ù–Æ –¢–û–í–ê–†–û–í</b>',
                                     reply_markup=kb.products_menu,
                                     parse_mode='HTML')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@products_menu.callback_query(F.data == 'add_product')
async def product_add(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(Product.name)
    await callback.message.edit_text(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>',
                                     reply_markup=kb.product_cancellation,
                                     parse_mode='HTML')
    await state.update_data(message_id=callback.message.message_id, chat_id=callback.message.chat.id)


# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@products_menu.message(Product.name)
async def product_name(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    data = await state.get_data()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ.–∏.
    await state.set_state(Product.unit) 
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>',
                                        reply_markup=kb.product_units,
                                        parse_mode='HTML')


# –§–∏–∫—Å–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
@products_menu.callback_query(F.data.in_(["–∫–≥", "—à—Ç."]))
async def product_unit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(product_unit=callback.data)
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(Product.price)
    await callback.message.edit_text(text=f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 {callback.data} —Ç–æ–≤–∞—Ä–∞ {data['product_name']} –≤ —Ä—É–±–ª—è—Ö –ü–ú–†</b>',
                                    reply_markup=kb.product_cancellation,
                                    parse_mode='HTML')


# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
@products_menu.message(Product.price)
async def product_price(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        float(message.text)
    except:
        try:
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>‚ùó\n\n' \
                                                    '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä –∏ –æ–¥–Ω–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è: <i>123.45</i>\n\n' \
                                                    f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 {data['product_unit']} —Ç–æ–≤–∞—Ä–∞ {data['product_name']} –≤ —Ä—É–±–ª—è—Ö –ü–ú–†</b>',
                                                reply_markup=kb.product_cancellation,
                                                parse_mode='HTML')
            return None
        except TelegramBadRequest:
            return None
        
    await state.update_data(product_price=message.text)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                    message_id=data['message_id'],
                                    text='<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ, –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ</b>\n' \
                                    f'{data['product_name']} - —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {message.text} —Ä –∑–∞ 1 {data['product_unit']}',
                                    reply_markup=kb.product_confirmation,
                                    parse_mode='HTML')
    

# –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@products_menu.callback_query(F.data == 'product_confirmation')
async def product_confirmation(callback: CallbackQuery, state: FSMContext):
    product_data = await state.get_data() 
    await add_product(product_data)
    await callback.answer('–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É', show_alert=True)
    await products_menu_handler(callback, state)
    

# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
@products_menu.callback_query(F.data == 'list_product')
async def list_product_handler(callback: CallbackQuery):
    products_data = await get_products()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    text = 'üìô<b> –°–ü–ò–°–û–ö –ü–†–û–î–£–ö–¢–û–í </b>\n\n'
    for product_data in products_data:
        text += f'- <b>{product_data.product_name}</b> - {product_data.product_price} —Ä/{product_data.product_unit}\n'

    await callback.message.edit_text(text=text,
                                     reply_markup=kb.list_product_menu,
                                     parse_mode='HTML')
    

# –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@products_menu.callback_query(F.data == 'change_product_data')
@products_menu.callback_query(F.data.startswith('products_menu_product_page_'))
async def choose_product_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('products_menu_product_page_'):
        page = int(callback.data.split('_')[-1])
    else:
        page = 1
        state.update_data(from_callback=callback.data)
    
    products = await get_products()
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø</b> ‚ùì',
                                     reply_markup=kb.choose_product(products, page=page),
                                     parse_mode='HTML')
    

# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@products_menu.callback_query(F.data.startswith('products_menu_product_id_'))
@products_menu.callback_query(F.data == 'back_to_change_product_menu')
async def change_product_menu_handler(callback: CallbackQuery, state: FSMContext):
    # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    if callback.data.startswith('products_menu_product_id_'):
        product_id = int(callback.data.split('_')[-1])
        await state.update_data(product_id=product_id)

    data = await state.get_data()
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_data = await get_product(product_id=data['product_id'])
    product_name = product_data.product_name
    product_price = float(product_data.product_price)
    product_unit = product_data.product_unit
    message_id = callback.message.message_id
    chat_id = callback.message.chat.id
    
    await state.update_data(product_name=product_name,
                            product_price=product_price,
                            product_unit=product_unit,
                            message_id=message_id,
                            chat_id=chat_id)
    
    await callback.message.edit_text(text='‚úçÔ∏è <b>–ú–ï–ù–Æ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê</b> üßÄ\n\n' \
                                            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä <b>{product_name}</b> —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ' \
                                            f'<b>{product_price} —Ä</b> –∑–∞ 1 <b>{product_unit}</b>',
                                     reply_markup=kb.change_product_menu,
                                     parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
@products_menu.callback_query(F.data == 'change_product_name')
async def change_product_name_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    await callback.message.edit_text(text='‚ùì <b>–í–í–ï–î–ò–¢–ï –ù–û–í–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–û–í–ê–†–ê</b> ‚ùì\n\n'
                                            f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ <b>{data['product_name']}</b>',
                                     reply_markup=kb.back_to_change_product_menu,
                                     parse_mode='HTML')
    await state.set_state(Product.change_name)
    

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@products_menu.message(Product.change_name)
async def save_product_name_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    
    product_id = data['product_id']
    state_name = (await state.get_state()).split(':')[-1]
    if state_name == 'change_name':
        product_data = {'product_name': message.text}
    elif state_name == 'change_price':
        product_data = {'product_price': message.text}
    
    await change_product_data(product_id, product_data)

    # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_data = await get_product(product_id=data['product_id'])
    product_name = product_data.product_name
    product_price = float(product_data.product_price)
    product_unit = product_data.product_unit
    
    await state.update_data(product_name=product_name,
                            product_price=product_price,
                            product_unit=product_unit)
    
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text='‚úçÔ∏è <b>–ú–ï–ù–Æ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê</b> üßÄ\n\n' \
                                            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä <b>{product_name}</b> —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ' \
                                            f'<b>{product_price} —Ä</b> –∑–∞ 1 <b>{product_unit}</b>',
                                        reply_markup=kb.change_product_menu,
                                        parse_mode='HTML')
    

