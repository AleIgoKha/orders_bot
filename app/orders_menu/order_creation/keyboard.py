from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests import get_products



order_cancelation = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'back_from_order_creation')]
])

new_order_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÄ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='add_product_to_order')],
    [InlineKeyboardButton(text='üì§ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫—É—É–º–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É', callback_data='add_vacc_to_order')],
    # [InlineKeyboardButton(text='üìâ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', callback_data='add_disc_to_order')],
    [InlineKeyboardButton(text='üìâ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', callback_data='disc_all')],
    [InlineKeyboardButton(text='‚úç–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='change_order')],
    [InlineKeyboardButton(text='üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', callback_data='add_note')],
    [InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='save_order')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'confirm_order_cancelation')]
])
    
async def choose_product(page: int = 1, products_per_page: int = 8):
    products = await get_products()
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products = products[start:end]
    
    for product in current_products:
        text = f"{product.product_name} - {product.product_price} —Ä/{product.product_unit}"
        callback_data = f"product_id_{product.product_id}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"product_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()

change_order_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='change_name')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞', callback_data='change_product')],
    [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –≤–∞–∫—É—É–º–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É', callback_data='delete_vacc')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation')]
])

async def change_product_keyboard(products: dict, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['product_unit']
        if product_unit == '–∫–≥':
            product_unit == '–≥'
        
        text = f"{product_data['product_name']} - {product_data['product_qty']} {product_unit}"
        callback_data = product
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_data_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"product_data_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()

order_confirmation = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_order_creation'),
     InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation')]
])

back_to_order_changing = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order')]])

back_to_order_creation = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation')]])

confirm_order_cancelation = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É', callback_data='back_from_order_creation'),
     InlineKeyboardButton(text='üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É', callback_data='back_to_order_creation')]
])

note_removal = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation'),
     InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='note_removal')]
])


# –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏
async def choose_product_vacc(products: dict, from_callback: str, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['product_unit']
        if product_unit == '–∫–≥':
            product_unit == '–≥'
        
        text = f"{product_data['product_name']} - {product_data['product_qty']} {product_unit}"
        callback_data = f"add_vacc_item_{product.split('_')[-1]}"
        
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    else:
        if from_callback == 'add_vacc_to_order':
            text = 'üß® –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='vacc_all'))
        elif from_callback == 'delete_vacc':
            text = 'üß® –£–¥–∞–ª–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='vacc_all'))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_vacc_page_{page - 1}")
        )
    
    if from_callback == 'add_vacc_to_order':
        navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation'))
    elif from_callback == 'delete_vacc':
        navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order'))
    

    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"add_vacc_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


async def choose_add_disc(products: dict, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['product_unit']
        if product_unit == '–∫–≥':
            product_unit == '–≥'
        
        text = f"{product_data['product_name']} - {product_data['product_qty']} {product_unit} - {product_data['item_disc']}%"
        callback_data = f"add_disc_item_{product.split('_')[-1]}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    else:
        text = 'üß® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üß®'
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data='disc_all'))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_disc_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='back_to_order_creation'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"add_disc_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()