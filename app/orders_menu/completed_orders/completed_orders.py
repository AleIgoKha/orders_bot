from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

import app.orders_menu.completed_orders.keyboard as kb
from app.database.requests import get_orders_items
from app.orders_menu.orders_menu import back_to_orders_menu_handler
from app.com_func import group_orders_items

completed_orders = Router()

def order_message(order_items_data):
    text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!‚úã\n–≠—Ç–æ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –°—ã—Ä–∞ –ò–≥–æ—Ä—è –•–∞—Ä—á–µ–Ω–∫–æ. ' \
            f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ <b>‚Ññ{order_items_data['order_number']}</b> —Å–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.\n\n' \
            f'üßÄ–í–∞—à –∑–∞–∫–∞–∑:\n'
    
    items_list = [item for item in order_items_data.keys() if item.startswith('item_')]
    total_price = 0
    
    if items_list: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç –ª–∏ –∑–∞–∫–∞–∑
        for item in items_list:
            item_name = order_items_data[item]['item_name']
            item_price = order_items_data[item]['item_price']
            item_qty = order_items_data[item]['item_qty']
            item_unit = order_items_data[item]['item_unit']
            item_qty_fact = order_items_data[item]['item_qty_fact']
            item_vacc = order_items_data[item]['item_vacc']
                    
            
            if item_vacc:
                item_vacc = ' (–≤–∞–∫. —É–ø.)'
                if item_qty_fact < 200:
                    vacc_price = 5
                elif 200 <= item_qty_fact < 300:
                    vacc_price = 6
                elif 300 <= item_qty_fact:
                    vacc_price = (item_qty_fact * 2) / 100
            else:
                item_vacc = ''
                vacc_price = 0
                
            text += f'{item_name}{item_vacc}'
            item_price = round(item_qty_fact * float(item_price) + vacc_price)
            if item_unit == '–∫–≥': # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏–ª–æ–≥—Ä–∞–º—ã –≤ –≥—Ä–∞–º–º—ã
                text += f' - {int(item_qty_fact * 1000)} {item_unit[-1]}\n'
            else:
                text += f' - {int(item_qty_fact)} {item_unit}\n'
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–∫–ª—é—á–∞—è –≤–∞–∫—É—É–º
            
            total_price += item_price
            
    
    order_disc = order_items_data['order_disc']
    if order_disc > 0:
        text += f'\n–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ <b>{order_disc}%</b>\n'
    
    text += f'\n–ö –æ–ø–ª–∞—Ç–µ - <b>{round(total_price * ((100 - order_disc) / 100))} —Ä</b>\n\n' \
            '–î–æ –≤—Å—Ç—Ä–µ—á–∏!'
    
    return text

# –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
@completed_orders.callback_query(F.data == 'completed_orders')
async def completed_orders_list_handler(callback: CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ —Ö–∞–Ω–¥–ª–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ callback, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è
    if callback.data:
        await state.update_data(callback_name=callback.data)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–µ—Å—Å–∏–∏
    data = await state.get_data()
    session_id = data['session_id']
    orders_items = await get_orders_items(session_id)
    orders_items_data = group_orders_items(orders_items)
    
    # —Ñ–∏–ª—å—Ç—Ä - –µ—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–æ–≥–æ, —Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–Ω –Ω–µ –ø–æ–ø–∞–¥–µ—Ç
    orders_items_data = [order_items_data for order_items_data in orders_items_data if order_items_data['order_completed']]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if not orders_items_data:
        await callback.answer(text='–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤', show_alert=True)
        # –ï—Å–ª–∏ –∑–∞—à–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ callback completed_orders, –∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
        if data['callback_name'] != 'completed_orders':
            return await back_to_orders_menu_handler(callback, state)
        return None # —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    

    messages_sent = 0
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
    for order_items_data in orders_items_data:
        
        text = order_message(order_items_data)
        
        messages_sent += 1
        if messages_sent != len(orders_items_data):
            message = await callback.bot.send_message(chat_id=data['chat_id'],
                                            text=text,
                                            reply_markup=kb.change_button(order_items_data['order_id']),
                                            parse_mode='HTML')
        else:
            message = await callback.bot.send_message(chat_id=data['chat_id'],
                                            text=text,
                                            reply_markup=kb.last_change_button(order_items_data['order_id']),
                                            parse_mode='HTML')
            
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
    await callback.bot.delete_message(chat_id=data['chat_id'], message_id=data['message_id'])
            
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(message_id=message.message_id, messages_sent=messages_sent, from_menu='completed_orders')

