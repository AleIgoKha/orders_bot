from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime, date


import app.orders_menu.keyboard as kb
from app.states import Session
from app.database.requests import add_session, get_session

orders_menu = Router()

# –†–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–æ–≤
@orders_menu.callback_query(F.data == 'orders')
async def orders_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text='üì¶ <b>–ú–ï–ù–Æ –ó–ê–ö–ê–ó–û–í</b> üì¶', reply_markup=kb.orders_menu, parse_mode='HTML')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
@orders_menu.callback_query(F.data.startswith('session:month:prev:'))
@orders_menu.callback_query(F.data.startswith('session:month:next:'))
@orders_menu.callback_query(F.data == 'new_session')
async def new_session_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    now = datetime.now()
    year = now.year
    month = now.month
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
    if callback.data.startswith('session:month'):
        calendar_data = callback.data.split(':')
        if calendar_data[2] == 'prev':
            year = int(calendar_data[3])
            month = int(calendar_data[4]) - 1
            if month < 1:
                month = 12
                year -= 1
        elif calendar_data[2] == 'next':
            year = int(calendar_data[3])
            month = int(calendar_data[4]) + 1
            if month > 12:
                month = 1
                year += 1
        await callback.message.edit_reply_markup(reply_markup=kb.create_calendar_keyboard(year, month))
    else:
        await callback.message.edit_text(text='üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n<i>–î–î-–ú–ú-–ì–ì–ì–ì</i>',
                                        reply_markup=kb.create_calendar_keyboard(year, month),
                                        parse_mode='HTML')
    await state.set_state(Session.date)


# –£–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã
@orders_menu.message(Session.date_error)
@orders_menu.message(Session.date)
async def session_date_state_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        date_comp = [int(_) for _ in message.text.split('-')]
        if len(date_comp) != 3 or len(str(date_comp[2])) != 4:
            raise ValueError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        datetime(year=date_comp[2],
                month=date_comp[1],
                day=date_comp[0])
        await state.update_data(date=message.text)
        await state.set_state(Session.place)
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text='üèôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞</b>',
                                            reply_markup=kb.session_cancellation,
                                            parse_mode='HTML')
    except Exception:
        state_name = await state.get_state()
        if not 'date_error' in state_name:
            await state.set_state(Session.date_error)
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–û –£–ö–ê–ó–ê–ù–ê –î–ê–¢–ê</b> ‚ùó\n\n' \
                                                    '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º:</b>\n<i>–î–î-–ú–ú-–ì–ì–ì–ì</i>',
                                                reply_markup=kb.session_cancellation,
                                                parse_mode='HTML')
        return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
@orders_menu.callback_query(F.data.startswith('session:date:'))
async def session_date_callback_handler(callback: CallbackQuery, state: FSMContext):
    date_data = callback.data.split(':')[-3:]
    await state.update_data(date=f'{date_data[2]}-{date_data[1]}-{date_data[0]}')
    await state.set_state(Session.place)
    await callback.message.edit_text(text='üèôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞</b>',
                                    reply_markup=kb.session_cancellation,
                                    parse_mode='HTML')

# –£–∫–∞–∑–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@orders_menu.message(Session.place)
async def session_place(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(session_place=message.text)
    await state.set_state(Session.method)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ</b>',
                                            reply_markup=kb.issuing_method,
                                            parse_mode='HTML')


# –£–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–µ—Å—Å–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∞/—Å–∞–º–æ–≤—ã–≤–æ–∑/–ø–æ—á—Ç–∞
@orders_menu.callback_query(F.data.in_(['–°–∞–º–æ–≤—ã–≤–æ–∑', '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É', '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π']))
async def session_method(callback: CallbackQuery, state: FSMContext):
    session_data = await state.get_data()
    date_comp = [int(_) for _ in session_data['date'].split('-')]
    session_date = datetime(year=date_comp[2],
                            month=date_comp[1],
                            day=date_comp[0])
    await state.update_data(session_method=callback.data)
    await callback.message.edit_text("<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–∏–∂–µ:</b>\n" \
                                    f'üìÖ –î–∞—Ç–∞ —Å–µ—Å—Å–∏–∏: <b>{session_date.strftime('%d-%m-%Y')}</b>\n' \
                                    f'üèôÔ∏è –ú–µ—Å—Ç–æ: <b>{session_data['session_place']}</b>\n' \
                                    f'üì¶ –ú–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤: <b>{callback.data}</b>\n',
                                    reply_markup=kb.session_confirmation,
                                    parse_mode='HTML')


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ –µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@orders_menu.callback_query(F.data == 'session_confirmation')
async def session_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date_comp = [int(_) for _ in data['date'].split('-')]
    date = datetime(year=date_comp[2],
                    month=date_comp[1],
                    day=date_comp[0])
    session_data = {
        'session_date': date,
        'session_place': data['session_place'],
        'session_method': data['session_method']
    }
    await add_session(session_data)
    await callback.answer('–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', show_alert=True)
    await orders_menu_handler(callback, state)


# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
@orders_menu.callback_query(F.data.startswith('session_page_'))
@orders_menu.callback_query(F.data == 'choose_session')
async def choose_session(callback: CallbackQuery):
    if callback.data.startswith('session_page_'):
        page = int(callback.data.split('_')[-1])
    else:
        page = 1
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</b>',
                                     reply_markup=await kb.choose_session(page=page),
                                     parse_mode='HTML')


# –ó–∞—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
@orders_menu.callback_query(F.data.startswith('session_id_'))
async def session_menu_handler(callback: CallbackQuery, state: FSMContext):
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞—à–ª–∏ –≤ —Å–µ—Å—Å–∏—é –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–ª–∞—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if callback.data.startswith('session_id_'):
        await state.clear()
        session_id = int(callback.data.split('_')[-1])
        session_data = await get_session(session_id)
        await state.update_data(session_id=session_id,
                                session_date=session_data.session_date.strftime('%d-%m-%Y'),
                                session_place=session_data.session_place,
                                session_method=session_data.session_method,
                                message_id=callback.message.message_id,
                                chat_id=callback.message.chat.id)
    # –ï—Å–ª–∏ –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Ç–æ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    else:
        data = await state.get_data()
        data_refreshed = {'session_id': data['session_id'],
                'session_date': data['session_date'],
                'session_place': data['session_place'],
                'session_method': data['session_method'],
                'message_id': data['message_id'],
                'chat_id': data['chat_id']}
        await state.clear()
        await state.update_data(data_refreshed)
        
    data = await state.get_data()
        
    await callback.message.edit_text('üìã <b>–ú–ï–ù–Æ –°–ï–°–°–ò–ò</b> üìã\n\n' \
                                    f'üìÖ –î–∞—Ç–∞ —Å–µ—Å—Å–∏–∏: <b>{data['session_date']}</b>\n' \
                                    f'üèôÔ∏è –ú–µ—Å—Ç–æ: <b>{data['session_place']}</b>\n' \
                                    f'üì¶ –ú–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤: <b>{data['session_method']}</b>\n',
                                    reply_markup=kb.session_menu,
                                    parse_mode='HTML')
    

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
@orders_menu.callback_query(F.data == 'back_from_order_stats')
@orders_menu.callback_query(F.data == 'back_from_order_creation')
@orders_menu.callback_query(F.data == 'back_from_order_processing')
@orders_menu.callback_query(F.data == 'back_from_order_changing')
async def back_to_orders_menu_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    if callback.data in ['back_from_order_processing', 'back_from_order_changing']:
        for i in range(data['messages_sent']):
            try:
                message_id = data['message_id'] - i
                if callback.message.message_id != message_id:
                    await callback.bot.delete_message(chat_id=data['chat_id'], message_id=message_id)
            except TelegramBadRequest:
                continue
    
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
    data_refreshed = {'session_id': data['session_id'],
            'session_date': data['session_date'],
            'session_place': data['session_place'],
            'session_method': data['session_method'],
            'message_id': data['message_id'],
            'chat_id': data['chat_id']}
    await state.clear()
    await state.update_data(data_refreshed)
        
    data = await state.get_data()
        
    await callback.message.edit_text('üìã <b>–ú–ï–ù–Æ –°–ï–°–°–ò–ò</b> üìã\n\n' \
                                    f'üìÖ –î–∞—Ç–∞ —Å–µ—Å—Å–∏–∏: <b>{data['session_date']}</b>\n' \
                                    f'üèôÔ∏è –ú–µ—Å—Ç–æ: <b>{data['session_place']}</b>\n' \
                                    f'üì¶ –ú–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤: <b>{data['session_method']}</b>\n',
                                    reply_markup=kb.session_menu,
                                    parse_mode='HTML')


