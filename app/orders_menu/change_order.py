from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal

import app.orders_menu.keyboard as kb
from app.states import Item, Order
from app.database.requests import get_order_items, get_item, change_item_data, change_order_data, get_product, add_order_items, delete_items, delete_order, get_order, change_items_data
from app.orders_menu.completed_orders.completed_orders import completed_orders_list_handler
from app.orders_menu.order_processing.order_processing import orders_processing_list_handler


change_order = Router()


# –§—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
def group_orders_items(orders_items):
    order_id = 0
    orders_items_data = []
    for order, item in orders_items:
        if order_id != order.order_id:
            order_id = order.order_id
            if item != None:
                orders_items_data.append({'order_number': order.order_number,
                                        'client_name': order.client_name,
                                        'order_id': order.order_id,
                                        'order_completed': order.order_completed,
                                        'order_note': order.order_note,
                                        f'item_{item.item_id}': {
                                            'item_id': item.item_id,
                                            'item_name': item.item_name,
                                            'item_unit': item.item_unit,
                                            'item_price': item.item_price,
                                            'item_qty': item.item_qty,
                                            'item_qty_fact': item.item_qty_fact,
                                            'item_disc': item.item_disc,
                                            'item_vacc': item.item_vacc
                                        }})
            else:
                orders_items_data.append({'order_number': order.order_number,
                                        'client_name': order.client_name,
                                        'order_id': order.order_id,
                                        'order_completed': order.order_completed,
                                        'order_note': order.order_note})
        else:
            orders_items_data[-1][f'item_{item.item_id}'] = {
                                    'item_id': item.item_id,
                                    'item_name': item.item_name,
                                    'item_unit': item.item_unit,
                                    'item_price': item.item_price,
                                    'item_qty': item.item_qty,
                                    'item_qty_fact': item.item_qty_fact,
                                    'item_disc': item.item_disc,
                                    'item_vacc': item.item_vacc
                                }
    return orders_items_data


# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –∑–∞–∫–∞–∑–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def order_text(order_items_data):
    text = f'üìã <b>–ó–ê–ö–ê–ó ‚Ññ{order_items_data['order_number']}</b>\n\n' \
            f'üë§ –ö–ª–∏–µ–Ω—Ç - <b>{order_items_data['client_name']}</b>\n\n'
    
    items_list = [item for item in order_items_data.keys() if item.startswith('item_')]
    
    if items_list: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç –ª–∏ –∑–∞–∫–∞–∑
        for item in items_list:
            item_name = order_items_data[item]['item_name']
            item_price = order_items_data[item]['item_price']
            item_qty = order_items_data[item]['item_qty']
            item_unit = order_items_data[item]['item_unit']
            item_qty_fact = order_items_data[item]['item_qty_fact']
            
            item_unit_amend = item_unit
            if item_unit_amend == '–∫–≥': # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏–ª–æ–≥—Ä–∞–º—ã –≤ –≥—Ä–∞–º–º—ã
                item_unit_amend = '–≥'
                item_qty = int(item_qty * 1000)
                item_qty_fact = int(item_qty_fact * 1000)
                item_price_fact = round(order_items_data[item]['item_qty_fact'] * float(item_price), 2)
                text += f'üßÄ <b>{item_name}</b>\n–ó–∞–∫–∞–∑–∞–Ω–æ - <b>{item_qty} {item_unit_amend}</b>\n–í–∑–≤–µ—à–µ–Ω–æ - <b>{item_qty_fact} {item_unit_amend}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å - <b>{item_price_fact} —Ä</b>\n\n'
            elif item_unit_amend == '—à—Ç.':
                item_price_fact = round(item_qty * float(item_price), 2)
                item_qty = int(order_items_data[item]['item_qty'])
                text += f'üßÄ <b>{item_name}</b>\n–ó–∞–∫–∞–∑–∞–Ω–æ - <b>{item_qty} {item_unit_amend}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å - <b>{item_price_fact} —Ä</b>\n\n'
    else:
        text += '<b>–ó–∞–∫–∞–∑ –ø—É—Å—Ç ü§∑‚Äç‚ôÇÔ∏è</b>\n\n'
    
    order_note = order_items_data['order_note']
    if order_note:
        text += f'<b>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>\n{order_note}'  
    return text


# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –ª–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–µ–Ω—é —Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–º–∏/–≥–æ—Ç–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –ª–∏–±–æ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
@change_order.callback_query(F.data == 'change_order_data')
@change_order.callback_query(F.data.endswith('_change_order'))
async def change_order_data_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ change_order_{id}, —Ç–æ –Ω—É–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å order_id
    if callback.data.split('_')[0].isdigit():
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(data['messages_sent']):
            try:
                message_id = data['message_id'] - i
                if callback.message.message_id != message_id:
                    await callback.bot.delete_message(chat_id=data['chat_id'], message_id=message_id)
            except TelegramBadRequest:
                continue
    
        # –î–æ—Å—Ç–∞–µ–º id –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_id = int(callback.data.split('_')[0])
        await state.update_data(message_id=callback.message.message_id,
                        order_id=order_id)
        data = await state.get_data()

    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    # –í—ã–≤–æ–¥–∏–º –æ–¥–∏–Ω –∑–∞–∫–∞–∑
    text = order_text(order_items_data)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –∏–∑ –∫–∞–∫–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏—à–ª–∏, –≤—ã—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if data['from_menu'] == 'order_processing':
        await callback.message.edit_text(text=text,
                                         reply_markup=kb.change_order_data_keyboard,
                                         parse_mode='HTML')
    elif data['from_menu'] == 'completed_orders':
        await callback.message.edit_text(text=text,
                                         reply_markup=kb.change_completed_order_data_keyboard,
                                         parse_mode='HTML')     


# –ó–∞—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
@change_order.callback_query(F.data == 'change_item_data')
async def change_item_data_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    text = order_text(order_items_data)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.change_item_data,
                                     parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ
@change_order.callback_query(F.data == 'change_client_name')
async def change_client_name_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='‚ùì<b>–í–í–ï–î–ò–¢–ï –ù–û–í–û–ï –ò–ú–Ø –ö–õ–ò–ï–ù–¢–ê</b>‚ùì',
                                            reply_markup=kb.back_to_change_order_data,
                                            parse_mode='HTML')
    await state.set_state(Order.change_client_name)


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ
@change_order.callback_query(F.data.startswith('change_item_qty_page_'))
@change_order.callback_query(F.data == 'delete_item')
@change_order.callback_query(F.data == 'change_item_qty')
@change_order.callback_query(F.data == 'change_item_qty_fact')
async def change_item_qty_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('change_item_qty_page_'):
        page = int(callback.data.split('_')[-1])
        
    else:
        page = 1
        await state.update_data(callback_name=callback.data)
    
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if data['callback_name'] == 'change_item_qty':
        qty_option = '–ò–ó–ú–ï–ù–ï–ù–ò–Ø –ï–ì–û –ó–ê–ö–ê–ó–ê–ù–ù–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê'
        items_data_list = [order_items_data[item]
                        for item in order_items_data.keys() if item.startswith('item_')]
    elif data['callback_name'] == 'change_item_qty_fact':
        qty_option = '–ò–ó–ú–ï–ù–ï–ù–ò–Ø –ï–ì–û –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê'
        items_data_list = [order_items_data[item]
                        for item in order_items_data.keys() if item.startswith('item_')
                        and order_items_data[item]['item_unit'] != '—à—Ç.']
    elif data['callback_name'] == 'delete_item':
        qty_option = '–ï–ì–û –£–î–ê–õ–ï–ù–ò–Ø'
        items_data_list = [order_items_data[item]
                        for item in order_items_data.keys() if item.startswith('item_')]
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –∑–∞–∫–∞–∑–∞
        
    await callback.bot.edit_message_text(chat_id=data['chat_id'],
                                         message_id=data['message_id'],
                                         text=f'‚ùì<b>–í–´–ë–ï–†–ò–¢–ï –ü–†–û–î–£–ö–¢ –î–õ–Ø {qty_option}</b>‚ùì',
                                         reply_markup=kb.choose_change_item_qty(items_data_list, page=page),
                                         parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑
@change_order.callback_query(F.data.startswith('add_item_page_'))
@change_order.callback_query(F.data == 'add_new_item')
async def choose_new_item_handler(callback: CallbackQuery):
    if callback.data.startswith('add_item_page_'):
        page = int(callback.data.split('_')[-1])
    else:
        page = 1
    await callback.message.edit_text(text='‚ùì<b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø</b>‚ùì',
                                     reply_markup=await kb.choose_add_item(page=page),
                                     parse_mode='HTML')


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ–¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@change_order.callback_query(F.data.startswith('add_item_id_'))
async def add_new_item_handler(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split('_')[-1])
    item_data =  await get_product(product_id=item_id) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–º–µ–Ω—ã
    await state.update_data(item_id=item_id)
    product_unit = item_data.product_unit
    product_unit_amend = '—à—Ç—É–∫–∞—Ö'
    if product_unit == '–∫–≥':
        product_unit = product_unit[-1]
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    await callback.message.edit_text(text='‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê </b>‚ùì\n\n' \
                                            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - <b>{item_data.product_name} - {item_data.product_price} —Ä/{product_unit}</b>. ' \
                                            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∂–∏—Ç–µ –≤ <b>{product_unit_amend}</b>',
                                    reply_markup=kb.back_to_change_item_data,
                                    parse_mode='HTML')
    await state.set_state(Item.item_qty)


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
@change_order.callback_query(F.data.startswith('change_item_qty_'))
async def change_item_qty_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    item_id = int(callback.data.split('_')[-1])
    await state.update_data(item_id=item_id)
    item_data = await get_item(item_id)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    item_unit = item_data.item_unit
    item_unit_amend = '—à—Ç—É–∫–∞—Ö'
    if item_unit == '–∫–≥':
        item_unit = item_unit[-1]
        item_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
        
    if data['callback_name'] == 'delete_item':
        await callback.message.edit_text(text=f'‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê –ò–ó –ó–ê–ö–ê–ó–ê</b> ‚ùì\n\n'
                                         f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - <b>{item_data.item_name}</b>',
                                        reply_markup=kb.confirm_delete_item,
                                        parse_mode='HTML')
    else:
        qty_option = '–§–ê–ö–¢–ò–ß–ï–°–ö–û–ï'
        if data['callback_name'] == 'change_item_qty':
            qty_option = '–ó–ê–ö–ê–ó–ê–ù–ù–û–ï'
        await callback.message.edit_text(text=f'‚ùì <b>–£–ö–ê–ñ–ò–¢–ï {qty_option} –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b> ‚ùì\n\n' \
                                            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - <b>{item_data.item_name} - {item_data.item_price} —Ä/{item_unit}</b>. ' \
                                            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∂–∏—Ç–µ –≤ <b>{item_unit_amend}</b>',
                                        reply_markup=kb.back_to_change_item_data,
                                        parse_mode='HTML')
        await state.set_state(Item.change_item_qty)


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@change_order.message(Order.change_disc)
@change_order.message(Item.item_qty)
@change_order.message(Order.change_client_name)
@change_order.message(Item.change_item_qty)
@change_order.message(Order.change_note)
async def confirm_change_item_qty_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    state_name = await state.get_state()
    
    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–∞–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–∫ –∏ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π
    if 'change_item_qty' in state_name:
        qty_option = 'item_qty_fact'
        text_option = '–§–ê–ö–¢–ò–ß–ï–°–ö–û–ï'
        if data['callback_name'] == 'change_item_qty':
            qty_option = 'item_qty'
            text_option = '–ó–ê–ö–ê–ó–ê–ù–ù–û–ï'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ —Ü–∏—Ñ—Ä
        try:
            item_qty = Decimal(message.text.replace(',', '.')) / 1000
        except:
            try:
                item_data = await get_item(data['item_id'])
                item_unit = item_data.item_unit
                item_unit_amend = '—à—Ç—É–∫–∞—Ö'
                if item_unit == '–∫–≥':
                    item_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
                await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b> ‚ùó\n\n' \
                                                    f'‚ùì <b>–£–ö–ê–ñ–ò–¢–ï {text_option} –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b> ‚ùì\n\n' \
                                                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - <b>{item_data.item_name} - {item_data.item_price} —Ä/{item_unit}</b>. ' \
                                                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∂–∏—Ç–µ –≤ <b>{item_unit_amend}</b>',
                                                reply_markup=kb.back_to_change_item_data,
                                                parse_mode='HTML')
                return None
            except TelegramBadRequest:
                return None
        # –ï—Å–ª–∏ –≤—Å–µ –æ–∫, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º  –Ω–æ–≤—ã–π –≤–µ—Å
        item_data = {qty_option: item_qty}
        await change_item_data(item_id=data['item_id'], item_data=item_data)
    
    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    elif 'change_client_name' in state_name:
        order_data = {'client_name': message.text}
        await change_order_data(order_id=data['order_id'], order_data=order_data)
        
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å –Ω–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    elif 'item_qty' in state_name:
        # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø—Ä–∞–π—Å–∞
        item_data = await get_product(product_id=data['item_id'])
        try:
            item_qty = Decimal(message.text.replace(',', '.'))
        except:
            try:
                item_unit = item_data.product_unit
                item_unit_amend = '—à—Ç—É–∫–∞—Ö'
                if item_unit == '–∫–≥':
                    item_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
                await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b> ‚ùó\n\n' \
                                                    f'‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ó–ê–ö–ê–ó–ê–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b> ‚ùì\n\n' \
                                                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - <b>{item_data.product_name} - {item_data.product_price} —Ä/{item_unit}</b>\n' \
                                                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∂–∏—Ç–µ –≤ <b>{item_unit_amend}</b>',
                                                reply_markup=kb.back_to_change_item_data,
                                                parse_mode='HTML')
                return None
            except TelegramBadRequest:
                return None
        # –ï—Å–ª–∏ –≤—Å–µ –æ–∫–µ–π —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        
        # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_data = await get_order(data['order_id'])
        order_item_data = [{
            'order_id': data['order_id'],
            'product_name': item_data.product_name,
            'product_unit': item_data.product_unit,
            'product_price': item_data.product_price,
            'product_qty': item_qty,
            'item_disc': order_data.order_disc,
            'item_vacc': False
        }]
        await add_order_items(order_item_data)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
    elif 'change_note' in state_name:
        order_data = {'order_note': message.text}
        await change_order_data(order_id=data['order_id'], order_data=order_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É –∑–∞–∫–∞–∑–∞
    elif 'change_disc' in state_name:
        data = await state.get_data()
        
        try:
            disc = int(message.text)
            if not 0 <= disc <= 100:
                raise
        except:
            try:
                await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                    message_id=data['message_id'],
                                                    text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>‚ùó\n\n' \
                                                        '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 0 –¥–æ 100: <i>123.45</i>\n\n' \
                                                        f'<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö</b>',
                                                    parse_mode='HTML',
                                                    reply_markup=kb.back_to_change_order_data)
                return None
            except TelegramBadRequest:
                return None
        
        order_id = data['order_id']
        order_data = {'order_disc': disc}
        await change_order_data(order_id=order_id, order_data=order_data)
            
    
    await state.set_state(None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = order_text(order_items_data)
    
    # –ó–¥–µ—Å—Ç—å –¥–≤–æ–π–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Å–∞—é—Ç—Å—è –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä–∞
    # –ò –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –¥–∞–Ω–Ω—ã–µ —á–µ–≥–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é 
    if data['from_menu'] == 'order_processing':
        reply_markup = kb.change_order_data_keyboard
        if state_name.split(':')[-1] in ('item_qty', 'change_item_qty'):
            reply_markup = kb.change_item_data
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text=text,
                                            reply_markup=reply_markup,
                                            parse_mode='HTML')
    elif data['from_menu'] == 'completed_orders':
        reply_markup = kb.change_completed_order_data_keyboard
        if state_name.split(':')[-1] in ('item_qty', 'change_item_qty', ):
            reply_markup = kb.change_item_data
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text=text,
                                            reply_markup=reply_markup,
                                            parse_mode='HTML')


# –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@change_order.callback_query(F.data == 'confirm_delete_item')
async def confirm_delete_item_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = [data['item_id']]
    await delete_items(item_ids=item_id)
    await callback.answer(text='–ü—Ä–æ–¥—É–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', show_alert=True) 
    await change_item_data_handler(callback, state)


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@change_order.callback_query(F.data == 'delete_order')
async def delete_order_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ</b> <i>–£–î–ê–õ–ò–¢–¨</i>',
                                     parse_mode='HTML',
                                     reply_markup=kb.back_to_change_order_data)
    await state.set_state(Order.delete_order)
    

# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
@change_order.message(Order.delete_order)
async def confirm_delete_order_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.upper() == '–£–î–ê–õ–ò–¢–¨':
        await state.set_state(None)
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text='‚ùó <b>–í–ù–ò–ú–ê–ù–ò–ï</b> ‚ùó\n\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n' \
                                                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?',
                                            parse_mode='HTML',
                                            reply_markup=kb.confirm_delete_order
                                            )
    else:
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text='‚ùó <b>–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –í–í–ï–î–ï–ù–´ –î–ê–ù–ù–´–ï!</b> ‚ùó\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ:\n <i>–£–î–ê–õ–ò–¢–¨</i>',
                                            parse_mode='HTML',
                                            reply_markup=kb.back_to_change_order_data)


# –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
@change_order.callback_query(F.data == 'confirm_delete_order')
async def finish_delete_order_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer(text='–ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', show_alert=True)
    
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    print(data)
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    item_ids = [item_id.split('_')[-1] for item_id in order_items_data.keys() if item_id.startswith('item_')]
    await delete_items(item_ids)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    order_id = data['order_id']
    await delete_order(order_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    await state.update_data(callback_name=callback.data) # —Ñ–ª–∞–≥ –¥–ª—è –º–µ–Ω—é –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–∫–∞–∑–æ–≤
    
    if data['from_menu'] == 'completed_orders':
        await completed_orders_list_handler(callback, state)
    elif data['from_menu'] == 'order_processing':
        await orders_processing_list_handler(callback, state)

    
# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
@change_order.callback_query(F.data == 'change_status')
async def change_status_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, –∑–∞–∫–∞–∑–∞ "–û–±—Ä–∞–±–æ—Ç–∞–Ω". –ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Ç—Å–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"?',
                                     reply_markup=kb.confirm_change_status)

  
# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
@change_order.callback_query(F.data == 'confirm_change_status')
async def confirm_change_status_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data['order_id']
    order_data = {'order_completed': False}
    await change_order_data(order_id=order_id, order_data=order_data)
    await callback.answer(text='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.', show_alert=True)
    await completed_orders_list_handler(callback, state)


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@change_order.callback_query(F.data == 'change_note')
async def change_note_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    text = '‚ùó <b>–í–≤–µ–¥–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b> ‚ùó\n'
    if order_items_data['order_note']:
        text += f'\n<b>–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b>\n<blockquote>{order_items_data['order_note']}</blockquote>'
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.confirm_change_note,
                                     parse_mode='HTML')
    await state.set_state(Order.change_note)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@change_order.callback_query(F.data == 'note_removal_from_order')
async def confirm_change_note(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    order_id = data['order_id']
    order_data = {'order_note': None}
    await change_order_data(order_id=order_id, order_data=order_data)
    await change_order_data_handler(callback, state)
    
    
# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑
@change_order.callback_query(F.data == 'change_order_disc')
async def change_item_disc_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='‚ùó <b>–í–í–ï–î–ò–¢–ï –†–ê–ó–ú–ï–† –°–ö–ò–î–ö–ò</b> ‚ùó\n\n' \
                                        '–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç –æ—Ç 0 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤',
                                    reply_markup=kb.back_to_change_order_data,
                                    parse_mode='HTML')
    await state.set_state(Order.change_disc)


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–∫—É—É–º–∞
@change_order.callback_query(F.data.startswith('change_vacc_page_'))
@change_order.callback_query(F.data == 'change_delete_item_vacc')
@change_order.callback_query(F.data == 'change_add_item_vacc')
async def change_vacc_to_order_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('change_vacc_page_'):
        page = int(callback.data.split('_')[-1])
    else:
        await state.update_data(from_callback=callback.data)
        page = 1
        
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º —Ä–∞–∑–ª–∏—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–∏–µ
    from_callback = data['from_callback']
    
    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_items = await get_order_items(data['order_id'])
    order_items_data = group_orders_items(order_items)[0]
    
    if from_callback == 'change_add_item_vacc':
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –±–µ–∑ –≤–∞–∫—É—É–º–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏
        products = {item:order_items_data[item] for item in order_items_data.keys() if item.startswith('item_')
                    and order_items_data[item]['item_vacc'] == False}
        if products:
            await callback.message.edit_text(text='‚ùó <b>–í–´–ë–ï–†–ò–¢–ï –ü–†–û–î–£–ö–¢ –î–õ–Ø –í–ê–ö–£–£–ú–ê–¶–ò–ò</b> ‚ùó',
                                            reply_markup= await kb.choose_change_product_vacc(products, from_callback, page=page),
                                            parse_mode='HTML')
        else:
            await callback.answer(text='–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏', show_alert=True)
    elif from_callback == 'change_delete_item_vacc':
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ —Å –≤–∞–∫—É—É–º–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–æ–π
        products = {item:order_items_data[item] for item in order_items_data.keys() if item.startswith('item_')
                    and order_items_data[item]['item_vacc'] == True}
        if products:
            await callback.message.edit_text(text='‚ùó <b>–í–´–ë–ï–†–ò–¢–ï –ü–†–û–î–£–ö–¢ –î–õ–Ø –û–¢–ú–ï–ù–´ –í–ê–ö–£–£–ú–ê–¶–ò–ò</b> ‚ùó',
                                            reply_markup= await kb.choose_change_product_vacc(products, from_callback, page=page),
                                            parse_mode='HTML')
        else:
            await callback.answer(text='–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤–∞–∫—É—É–º–∞—Ü–∏–µ–π', show_alert=True)
            

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–∫—É—É–º–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ
@change_order.callback_query(F.data.startswith('change_vacc_item_'))
@change_order.callback_query(F.data == 'change_vacc_all')
async def apply_change_vacc_to_order_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from_callback = data['from_callback']
    
    # –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    if from_callback == 'change_add_item_vacc':
        flag = True
    elif from_callback == 'change_delete_item_vacc':
        flag = False
    # –µ—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
    if callback.data.startswith('change_vacc_item_'): 
        item_id = int(callback.data.split('_')[-1])
        item_data = {'item_vacc': flag}
        await change_item_data(item_id, item_data)
    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å—Ä–∞–∑—É
    elif callback.data == 'change_vacc_all':

        order_items = await get_order_items(data['order_id'])
        order_items_data = group_orders_items(order_items)[0]

        items_id = [int(item_id.split('_')[-1]) for item_id in order_items_data.keys() if item_id.startswith('item_')]
        items_data = [{'item_vacc': flag} for _ in range(len(items_id))]
        await change_items_data(items_id, items_data)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º –≤–∞–∫—É—É–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    await change_item_data_handler(callback, state)