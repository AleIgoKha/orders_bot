import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from app.database.all_requests.transactions import were_stock_transactions


# –ú–µ–Ω—é –∑–∞–ø–∞—Å–æ–≤
stock_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='outlet:control')],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='outlet:back')]
])


# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def choose_product_outlet(stock_data: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_items = stock_data[start:end]
    
    for current_item in current_items:
        product_name = current_item['product_name']
        stock_qty = current_item['stock_qty']
        product_unit = current_item['product_unit']
        stock_id = current_item['stock_id']
        
        if product_unit != '–∫–≥':
            stock_qty = round(stock_qty)
        
        text = f"{product_name} - {stock_qty} {product_unit}"
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
        date_time = datetime.now(pytz.timezone("Europe/Chisinau"))
        check_flag = await were_stock_transactions(stock_id, date_time, ['replenishment'])
        if check_flag:
            text += ' ‚úÖ'
        
        callback_data = f"outlet:control:product_id_{current_item['product_id']}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    if page == 1:
        additional_buttons = []
        additional_buttons.append(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='outlet:control:add_product'))
        product_keyboard.row(*additional_buttons)
    
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:control:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:control:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:stock'))
    
    if end < len(stock_data):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:control:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:control:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
def choose_product_add(products: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products = products[start:end]
    
    for product in current_products:
        text = f"{product.product_name} - {product.product_price} —Ä/{product.product_unit}"
        callback_data = f"outlet:control:add_product:product_id_{product.product_id}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
       
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:control:add_product:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:control:add_product:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:control'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:control:add_product:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:control:add_product:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–ø–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
add_product = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='outlet:control:add_product:confirm')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:control:add_product')]
])

# –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
product_control_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='outlet:replenishment'),
    InlineKeyboardButton(text='‚ûñ –°–ø–∏—Å–∞—Ç—å', callback_data='outlet:writeoff')],
    [InlineKeyboardButton(text='üìì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', callback_data='outlet:stock:transactions'),
    InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data='outlet:stock:delete')],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='outlet:control:back')]
])


# –¥–ª—è –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def change_stock_qty_menu(operation, added_pieces, product_id):
    inline_keyboard = []
    upper_buttons = []
    lower_buttons = []
    
    if len(added_pieces) != 0:
        upper_buttons.append(InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Å–æ–∫', callback_data=f'outlet:control:correct_piece'))
        lower_buttons.append(InlineKeyboardButton(text='üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data=f'outlet:{operation}:calculate'))
        lower_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:{operation}:cancel'))
    else:
        lower_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:control:product_id_{product_id}'))
    
    inline_keyboard.append(upper_buttons)
    
    inline_keyboard.append(lower_buttons)
        
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
confirm_replenishment_product = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:replenishment'),
        InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='outlet:replenishment:confirm')]
    ])
    
    
# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
def cancel_replenishment_product(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='outlet:replenishment'),
        InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥', callback_data=f'outlet:control:product_id_{product_id}')]
    ])


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–ø–∞—Å–æ–≤
def confirm_delete(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='outlet:stock:delete:confirm'),
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:control:product_id_{product_id}')]
    ])

# –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
confirm_writeoff_product = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:writeoff'),
        InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='outlet:writeoff:confirm')]
    ])
    
    
# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
def cancel_writeoff_product(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:writeoff'),
        InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥', callback_data=f'outlet:control:product_id_{product_id}')]
    ])


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—É—Å–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –≤–µ—Å–∞
def choose_correct_piece(operation: str, added_pieces: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    pieces = added_pieces[start:end]

    for i in range(len(pieces)):
        text = f"{pieces[i]}"
        callback_data = f"outlet:control:correct_piece:piece_id_{i}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:control:correct_piece:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:control:correct_piece:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:{operation}'))
    
    if end < len(added_pieces):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:control:correct_piece:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:control:correct_piece:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()