from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal

from app.com_func import represent_utc_3
import app.main_menu.outlets_menu.outlet_menu.stock_menu.keyboard as kb
from app.states import Stock
from app.database.requests import get_outlet, get_product
from app.database.all_requests.stock import get_stock_product, get_stock_products, add_stock, change_stock_data, get_out_stock_products, delete_stock
from app.database.all_requests.transactions import add_transaction, delete_transaction, get_last_transaction, transaction_writeoff


stock_menu = Router()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –∑–∞–ø–∞—Å–æ–≤
def stock_list_text(stock_products_data):
    text = 'üì¶ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–ê–°–ê–ú–ò</b>\n\n'
    
    for stock_product_data in stock_products_data:
        product_name = stock_product_data.product.product_name
        stock_qty = stock_product_data.stock_qty
        product_unit = stock_product_data.product.product_unit
        
        if product_unit != '–∫–≥':
            stock_qty = round(stock_qty)
        
        text += f'{product_name} - <b>{stock_qty} {product_unit}</b>\n'
    
    return text

# –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@stock_menu.callback_query(F.data == 'outlet:stock')
async def operations_menu_handler(callback: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    
    stock_products_data = await get_stock_products(outlet_id) 
    
    text = stock_list_text(stock_products_data)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.stock_menu,
                                     parse_mode='HTML')


# –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
@stock_menu.callback_query(F.data.startswith('outlet:replenishment:page_'))
@stock_menu.callback_query(F.data == 'outlet:replenishment')
async def choose_product_replenishment_handler(callback: CallbackQuery, state: FSMContext):
    
    if callback.data.startswith('outlet:replenishment:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    
    data = await state.get_data()
    outlet_id = data['outlet_id']
    stock_data = await get_stock_products(outlet_id)
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–ü–ê–°–û–í</b>',
                                     reply_markup=kb.choose_product_replenishment(stock_data=stock_data, page=page),
                                     parse_mode='HTML')
    
    
# –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥
@stock_menu.callback_query(F.data.startswith('outlet:replenishment:add_product:page_'))
@stock_menu.callback_query(F.data == 'outlet:replenishment:add_product')
async def choose_add_product_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('outlet:replenishment:add_product:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
        
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    
    products_data = await get_out_stock_products(outlet_id)
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ó–ê–ü–ê–°–´</b>',
                                     reply_markup=kb.choose_product_add(products=products_data, page=page),
                                     parse_mode='HTML')
    

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–ø–∞—Å—ã
@stock_menu.callback_query(F.data.startswith('outlet:replenishment:add_product:product_id_'))
async def add_product_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    if callback.data.startswith('outlet:replenishment:add_product:product_id_'):
        product_id = int(callback.data.split('_')[-1])        
        product_data = await get_product(product_id)
        product_name = product_data.product_name
        await state.update_data(product_id=product_id)
    
    await callback.message.edit_text(text='‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê –í –ó–ê–ü–ê–°–´</b>\n\n' \
                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–ø–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ <b>{outlet_name}</b> —Ç–æ–≤–∞—Ä <b>{product_name}.\n\n</b>' \
                                        '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>',
                                        reply_markup=kb.add_product,
                                        parse_mode='HTML')
    

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–ø–∞—Å—ã
@stock_menu.callback_query(F.data == 'outlet:replenishment:add_product:confirm')
async def confirm_add_product_handler(callback: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    
    stock_data = {
        'outlet_id': outlet_id,
        'product_id': product_id
    }
    
    await add_stock(stock_data)
    
    await callback.answer(text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø–∞—Å—ã', show_alert=True)
    
    await choose_add_product_handler(callback, state)


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
@stock_menu.callback_query(F.data.startswith('outlet:replenishment:product_id_'))
async def product_replenishment_handler(callback: CallbackQuery, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
    if callback.data.startswith('outlet:replenishment:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        product_data = await get_product(product_id)
        product_name = product_data.product_name
        await state.update_data(product_id=product_id)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data.product.product_name
    product_unit = stock_product_data.product.product_unit
    stock_qty = stock_product_data.stock_qty
    stock_id = stock_product_data.stock_id
    
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
                                                       stock_id=stock_id,
                                                       transaction_type='replenishment')
    last_transaction_text = ''
    if last_transaction_data:
        transaction_datetime = represent_utc_3(last_transaction_data.transaction_datetime).strftime('–≤ %H:%M %d-%m-%Y')
        transaction_product_qty = last_transaction_data.product_qty
        
        if product_unit != '–∫–≥':
            transaction_product_qty = round(transaction_product_qty)
            
        last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>‚ûï{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
    
    await callback.message.edit_text(text='‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b>\n\n' \
                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                        f'{last_transaction_text}' \
                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n\n',
                                        reply_markup=kb.replenish_product,
                                        parse_mode='HTML')
    
    await state.set_state(Stock.replenishment)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
@stock_menu.message(Stock.replenishment)
async def product_replenishment_receiver_handler(message: Message, state: FSMContext):
    
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data.product.product_name
    product_unit = stock_product_data.product.product_unit
    stock_qty = stock_product_data.stock_qty
    stock_id = stock_product_data.stock_id
    
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
                                                       stock_id=stock_id,
                                                       transaction_type='replenishment')
    last_transaction_text = ''
    if last_transaction_data:
        transaction_datetime = represent_utc_3(last_transaction_data.transaction_datetime).strftime('–≤ %H:%M %d-%m-%Y')
        transaction_product_qty = last_transaction_data.product_qty
        
        if product_unit != '–∫–≥':
            transaction_product_qty = round(transaction_product_qty)
            
        last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>‚ûï{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        if product_unit == '–∫–≥':
            product_qty = product_qty / Decimal(1000)
        
        if product_qty == 0:
            try:
                await state.set_state(Stock.replenishment)
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text='‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –†–ê–í–ù–û –ù–£–õ–Æ!</b>\n\n' \
                                                        '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b>\n\n' \
                                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                        f'{last_transaction_text}' \
                                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n\n',
                                                    parse_mode='HTML',
                                                    reply_markup=kb.replenish_product)
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.replenishment)
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n' \
                                                    '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b>\n\n' \
                                                    f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                    f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                    f'{last_transaction_text}' \
                                                    f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n\n',
                                                parse_mode='HTML',
                                                reply_markup=kb.replenish_product)
            return None
        except TelegramBadRequest:
            return None
        
    product_price = stock_product_data.product.product_price
    
    # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
    try:
        transaction_data = {
            'outlet_id': outlet_id,
            'stock_id': stock_id,
            'transaction_type': 'replenishment',
            'product_name': product_name,
            'product_qty': product_qty,
            'product_price': product_price
        }
        
        transaction_id = await add_transaction(transaction_data)
        
        # –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å —É–¥–∞—á–Ω–æ, —Ç–æ –ø–æ–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∞—Å—ã
        try:
            stock_data = {
                'stock_qty' : stock_qty + product_qty
            }

            # –ø–æ–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∞—Å—ã 
            await change_stock_data(stock_id, stock_data)
            
        # –µ—Å–ª–∏ –∑–∞–ø–∞—Å—ã –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª–∏—Å—å —É–¥–∞—á–Ω–æ, —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–∏—à–µ–º –≤ –ª–æ–≥–∏
        except Exception as e:
            await state.set_state(Stock.replenishment)
            print(f'{e}\n\n–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞.')
            await delete_transaction(transaction_id)
            return None

    except Exception as e:
        await state.set_state(Stock.replenishment)
        print(f'{e}\n\n–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
        return None
    
    # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    stock_data = await get_stock_products(outlet_id)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–ü–ê–°–û–í</b>',
                                        reply_markup=kb.choose_product_replenishment(stock_data=stock_data),
                                        parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@stock_menu.callback_query(F.data == 'outlet:writeoff')
@stock_menu.callback_query(F.data.startswith('outlet:writeoff:page_'))
async def choose_product_writeoff_handler(callback: CallbackQuery, state: FSMContext):
    
    if callback.data.startswith('outlet:writeoff:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    
    data = await state.get_data()
    outlet_id = data['outlet_id']
    stock_data = await get_stock_products(outlet_id)
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø</b>',
                                     reply_markup=kb.choose_product_writeoff(stock_data=stock_data, page=page),
                                     parse_mode='HTML')
    
    
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
@stock_menu.callback_query(F.data.startswith('outlet:writeoff:product_id_'))
async def product_writeoff_handler(callback: CallbackQuery, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
    if callback.data.startswith('outlet:writeoff:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        product_data = await get_product(product_id)
        product_name = product_data.product_name
        await state.update_data(product_id=product_id)
    
    data = await state.get_data()
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data.product.product_name
    product_unit = stock_product_data.product.product_unit
    stock_qty = stock_product_data.stock_qty
    stock_id = stock_product_data.stock_id
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º –¥–æ—Å—Ç–∞–µ–º –µ–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç
    last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
                                                       stock_id=stock_id,
                                                       transaction_type='writeoff')
    last_transaction_text = ''
    if last_transaction_data:
        transaction_datetime = represent_utc_3(last_transaction_data.transaction_datetime).strftime('–≤ %H:%M %d-%m-%Y')
        transaction_product_qty = last_transaction_data.product_qty
        # –µ—Å–ª–∏ –∫–∏–ª–æ–≥—Ä–∞–º—ã, —É–±–∏—Ä–∞–µ–º –Ω—É–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if product_unit != '–∫–≥':
            transaction_product_qty = round(transaction_product_qty)
        last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>‚ûñ{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
    
    await callback.message.edit_text(text='‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø</b>\n\n' \
                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                        f'{last_transaction_text}' \
                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>. ' \
                                        '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <i>–£–î–ê–õ–ò–¢–¨</i>.\n\n',
                                    reply_markup=kb.writeoff_product,
                                    parse_mode='HTML')
    
    await state.set_state(Stock.writeoff)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ
@stock_menu.message(Stock.writeoff)
async def product_writeoff_receiver_handler(message: Message, state: FSMContext):
    
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data.product.product_name
    product_unit = stock_product_data.product.product_unit
    stock_qty = stock_product_data.stock_qty
    stock_id = stock_product_data.stock_id
    product_price = stock_product_data.product.product_price
    
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
                                                       stock_id=stock_id,
                                                       transaction_type='writeoff')
    last_transaction_text = ''
    if last_transaction_data:
        transaction_datetime = represent_utc_3(last_transaction_data.transaction_datetime).strftime('–≤ %H:%M %d-%m-%Y')
        transaction_product_qty = last_transaction_data.product_qty
        
        if product_unit != '–∫–≥':
            transaction_product_qty = round(transaction_product_qty)
            
        last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>‚ûñ{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
    

    if message.text.lower().strip() == '—É–¥–∞–ª–∏—Ç—å':
        # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
        try:
            transaction_data = {
                'outlet_id': outlet_id,
                'stock_id': stock_id,
                'transaction_type': 'writeoff',
                'product_name': product_name,
                'product_qty': stock_qty,
                'product_price': product_price
            }
            
            transaction_id = await add_transaction(transaction_data)
            
            # –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å —É–¥–∞—á–Ω–æ, —Ç–æ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
            try:
                await delete_stock(stock_id)
            # –µ—Å–ª–∏ –Ω–µ –±—ã–ª —É–¥–∞—á–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–ø–∞—Å–æ–≤, —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–∏—à–µ–º –≤ –ª–æ–≥–∏ –æ—à–∏–±–∫—É
            except Exception as e:
                await state.set_state(Stock.writeoff)
                print(f'{e}\n\n–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–ø–∞—Å–æ–≤.')
                await delete_transaction(transaction_id)
                return None

        except Exception as e:
            await state.set_state(Stock.writeoff)
            print(f'{e}\n\n–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
            return None
    # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª—è–µ–º, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        try:
            product_qty = Decimal(message.text.replace(',', '.'))
            
            if product_unit == '–∫–≥':
                product_qty = product_qty / Decimal(1000)
            
            if product_qty == 0:
                try:
                    await state.set_state(Stock.writeoff)
                    await message.bot.edit_message_text(chat_id=chat_id,
                                                        message_id=message_id,
                                                        text='‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –†–ê–í–ù–û –ù–£–õ–Æ!</b>\n\n' \
                                                            '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø</b>\n\n' \
                                                            f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                            f'{last_transaction_text}' \
                                                            f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>. ' \
                                                            '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <i>–£–î–ê–õ–ò–¢–¨</i>.\n\n',
                                                        parse_mode='HTML',
                                                        reply_markup=kb.writeoff_product)
                    return None
                except TelegramBadRequest:
                    return None
            elif stock_qty - product_qty < 0:
                try:
                    await state.set_state(Stock.writeoff)
                    await message.bot.edit_message_text(chat_id=chat_id,
                                                        message_id=message_id,
                                                        text='‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ó–ê–ü–ê–°–ê</b>\n\n' \
                                                            '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø</b>\n\n' \
                                                            f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                            f'{last_transaction_text}' \
                                                            f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>. ' \
                                                            '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <i>–£–î–ê–õ–ò–¢–¨</i>.\n\n',
                                                        parse_mode='HTML',
                                                        reply_markup=kb.writeoff_product)
                    return None
                except TelegramBadRequest:
                    return None
        except:
            try:
                await state.set_state(Stock.writeoff)
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n' \
                                                        '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø</b>\n\n' \
                                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                        f'{last_transaction_text}' \
                                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>. ' \
                                                        '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <i>–£–î–ê–õ–ò–¢–¨</i>.\n\n',
                                                    parse_mode='HTML',
                                                    reply_markup=kb.writeoff_product)
                return None
            except TelegramBadRequest:
                return None

        # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
        try:
            transaction_data = {
                'outlet_id': outlet_id,
                'stock_id': stock_id,
                'transaction_type': 'writeoff',
                'product_name': product_name,
                'product_qty': product_qty,
                'product_price': product_price
            }
            
            transaction_id = await add_transaction(transaction_data)
            
            # –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å —É–¥–∞—á–Ω–æ, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø–∞—Å—ã
            try:
                stock_data = {
                    'stock_qty' : stock_qty - product_qty
                }

                # —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø–∞—Å—ã 
                await change_stock_data(stock_id, stock_data)
                
            # –µ—Å–ª–∏ –∑–∞–ø–∞—Å—ã –Ω–µ —Å–ø–∏—Å–∞–ª–∏—Å—å —É–¥–∞—á–Ω–æ, —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–∏—à–µ–º –≤ –ª–æ–≥–∏ –æ—à–∏–±–∫—É
            except Exception as e:
                await state.set_state(Stock.writeoff)
                print(f'{e}\n\n–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞.')
                await delete_transaction(transaction_id)
                return None

        except Exception as e:
            await state.set_state(Stock.writeoff)
            print(f'{e}\n\n–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
            return None
    
    # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    stock_data = await get_stock_products(outlet_id)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–ü–ê–°–û–í</b>',
                                        reply_markup=kb.choose_product_writeoff(stock_data=stock_data),
                                        parse_mode='HTML')