from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal

import app.main_menu.outlets_menu.outlet_menu.stock_menu.keyboard as kb
from app.states import Stock
from app.database.requests import get_product
from app.database.all_requests.stock import get_stock_product, get_active_stock_products, add_stock, get_out_stock_products
from app.database.all_requests.transactions import transaction_writeoff, transaction_replenish, transaction_delete_product, transactions_info, transaction_info
from app.database.all_requests.outlet import get_outlet
from app.com_func import represent_utc_3


stock_menu = Router()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
async def replenishment_text(outlet_id, product_id, added_pieces):
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']
    
    # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    # stock_id = stock_product_data['stock_id']
    product_name = stock_product_data['product_name']
    
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    # last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
    #                                                    stock_id=stock_id,
    #                                                    transaction_type='replenishment')
    # last_transaction_text = ''
    # if last_transaction_data:
    #     transaction_datetime = represent_utc_3(last_transaction_data['transaction_datetime']).strftime('–≤ %H:%M %d-%m-%Y')
    #     transaction_product_qty = last_transaction_data['product_qty']
        
    #     if product_unit != '–∫–≥':
    #         transaction_product_qty = round(transaction_product_qty)
            
    #     last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>‚ûï{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
        
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
        product_unit_pieces = '–≥'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        product_unit_pieces = '—à—Ç.'
        stock_qty = int(stock_qty)
        
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces_text = ''
    if len(added_pieces) != 0:
        added_pieces_text = '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–º:\n'
        for added_piece in added_pieces:
            added_pieces_text += f'<b>{added_piece} {product_unit_pieces}</b>\n'
        added_pieces_text += f'–ò—Ç–æ–≥–æ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é - <b>{sum(added_pieces)} {product_unit_pieces}</b>\n'
        
    text = '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê</b>\n\n' \
            f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
            f'{added_pieces_text}' \
            f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>\n\n'
    
    return text


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
async def writeoff_text(outlet_id, product_id, added_pieces):
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']
    
    # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    product_name = stock_product_data['product_name']
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
        product_unit_pieces = '–≥'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        product_unit_pieces = '—à—Ç.'
        stock_qty = int(stock_qty)
        
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces_text = ''
    if len(added_pieces) != 0:
        added_pieces_text = '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–º:\n'
        for added_piece in added_pieces:
            added_pieces_text += f'<b>{added_piece} {product_unit_pieces}</b>\n'
        added_pieces_text += f'–ò—Ç–æ–≥–æ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é - <b>{sum(added_pieces)} {product_unit_pieces}</b>\n'
        
    text = '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø</b>\n\n' \
            f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
            f'{added_pieces_text}' \
            f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>. ' \
            '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <i>–£–î–ê–õ–ò–¢–¨</i>.\n\n'
    
    return text


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –∑–∞–ø–∞—Å–æ–≤
def stock_list_text(stock_products_data):
    text = 'üì¶ <b>–ó–ê–ü–ê–°–´</b>\n\n'
    
    for stock_product_data in stock_products_data:
        product_name = stock_product_data['product_name']
        stock_qty = stock_product_data['stock_qty']
        product_unit = stock_product_data['product_unit']
        
        if product_unit != '–∫–≥':
            stock_qty = round(stock_qty)
        
        text += f'{product_name} - <b>{stock_qty} {product_unit}</b>\n'
    
    return text

# –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@stock_menu.callback_query(F.data == 'outlet:stock')
async def stock_menu_handler(callback: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    
    stock_products_data = await get_active_stock_products(outlet_id) 
    
    text = stock_list_text(stock_products_data)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.stock_menu,
                                     parse_mode='HTML')


# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–∏–º
@stock_menu.callback_query(F.data.startswith('outlet:control:page_'))
@stock_menu.callback_query(F.data == 'outlet:control')
@stock_menu.callback_query(F.data == 'outlet:control:back')
async def choose_product_control_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    if callback.data.startswith('outlet:control:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    elif callback.data == 'outlet:control':
        page = 1
    else:
        page = data['page']
        
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
    await state.update_data(page=page)
    
    outlet_id = data['outlet_id']
    stock_data = await get_active_stock_products(outlet_id)
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø</b>',
                                     reply_markup=await kb.choose_product_outlet(stock_data=stock_data, page=page),
                                     parse_mode='HTML')


# –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥
@stock_menu.callback_query(F.data.startswith('outlet:control:add_product:page_'))
@stock_menu.callback_query(F.data == 'outlet:control:add_product')
async def choose_add_product_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('outlet:control:add_product:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
        
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    
    products_data = await get_out_stock_products(outlet_id)
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ó–ê–ü–ê–°–´</b>',
                                     reply_markup=kb.choose_product_add(products=products_data, page=page),
                                     parse_mode='HTML')
    

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–ø–∞—Å—ã
@stock_menu.callback_query(F.data.startswith('outlet:control:add_product:product_id_'))
async def add_product_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']
    
    if callback.data.startswith('outlet:control:add_product:product_id_'):
        product_id = int(callback.data.split('_')[-1])        
        product_data = await get_product(product_id)
        product_name = product_data.product_name
        await state.update_data(product_id=product_id)
    
    await callback.message.edit_text(text='‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê –í –ó–ê–ü–ê–°–´</b>\n\n' \
                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–ø–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ <b>{outlet_name}</b> —Ç–æ–≤–∞—Ä <b>{product_name}.\n\n</b>' \
                                        '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>',
                                        reply_markup=kb.add_product,
                                        parse_mode='HTML')
    

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–ø–∞—Å—ã
@stock_menu.callback_query(F.data == 'outlet:control:add_product:confirm')
async def confirm_add_product_handler(callback: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    
    try:
        await add_stock(outlet_id, product_id)
        await callback.answer(text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø–∞—Å—ã', show_alert=True)
        await choose_add_product_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)


# –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
@stock_menu.callback_query(F.data.startswith('outlet:control:product_id_'))
async def product_control_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏
    if callback.data.startswith('outlet:control:product_id_'):
        product_id = int(callback.data.split('_')[-1])    
    else:
        product_id = data['product_id']   
    
    outlet_id = data['outlet_id']
    
    # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']

    # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    stock_id = stock_product_data['stock_id']
    product_name = stock_product_data['product_name']

    await state.update_data(stock_qty=str(stock_qty),
                            product_unit=product_unit,
                            product_id=product_id,
                            stock_id=stock_id,
                            product_name=product_name,
                            added_pieces=[])
    
    if product_unit == '—à—Ç.':
        stock_qty = int(stock_qty)

    text = '‚öôÔ∏è <b>–ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–û–ú</b>\n\n' \
            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>{product_name}</b>\n' \
            f'–¢–µ–∫—É—â–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ - <b>{outlet_name}</b>\n' \
            f'–ó–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n\n' \
            f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º.'
    

    await callback.message.edit_text(text=text,
                                        reply_markup=kb.product_control_menu,
                                        parse_mode='HTML')


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
@stock_menu.callback_query(F.data == 'outlet:replenishment')
async def product_replenishment_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    if callback.data == 'outlet:replenishment':
        operation = callback.data.split(':')[-1]
        await state.update_data(operation=operation)
    else:
        operation = data['operation']
    
    product_id = data['product_id']
    outlet_id = data['outlet_id']
    added_pieces = data['added_pieces']
    
    text = await replenishment_text(outlet_id, product_id, added_pieces)
    
    await callback.message.edit_text(text=text,
                                    reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id),
                                    parse_mode='HTML')
    
    await state.set_state(Stock.replenishment)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
@stock_menu.message(Stock.replenishment)
async def product_replenishment_receiver_handler(message: Message, state: FSMContext):
    
    await state.set_state(None)
    
    data = await state.get_data()
    
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    outlet_id = data['outlet_id']
    added_pieces = data['added_pieces']
    operation = data['operation']

    text = await replenishment_text(outlet_id, product_id, added_pieces)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        if product_qty <= 0:
            try:
                await state.set_state(Stock.replenishment)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ò–õ–ò –†–ê–í–ù–û –ù–£–õ–Æ</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id))
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.replenishment)
            warning_text = '‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n'
            text = warning_text + text
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text=text,
                                                parse_mode='HTML',
                                                reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id))
            return None
        except TelegramBadRequest:
            return None
    
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces.append(int(product_qty))
    await state.update_data(added_pieces=added_pieces)
    
    text = await replenishment_text(outlet_id, product_id, added_pieces)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id),
                                        parse_mode='HTML')
    
    await state.set_state(Stock.replenishment)

    
# –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@stock_menu.callback_query(F.data == 'outlet:replenishment:calculate')
async def calculate_replenishment_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    product_qty = sum(data['added_pieces'])
    product_unit = data['product_unit']
    product_name = data['product_name']
    
    if product_unit == '–∫–≥':
        product_unit = product_unit[-1]
    
    await callback.message.edit_text(text=f'–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –Ω–∞ <b>{product_qty} {product_unit}</b>',
                                        reply_markup=kb.confirm_replenishment_product,
                                        parse_mode='HTML')

        
# —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞
@stock_menu.callback_query(F.data == 'outlet:replenishment:confirm')
async def confirm_replenishment_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    added_pieces = [Decimal(added_piece) for added_piece in data['added_pieces']]
    product_qty = sum(added_pieces)
    product_unit = data['product_unit']

    if product_unit == '–∫–≥':
        product_qty = product_qty / Decimal(1000)
        added_pieces = [added_piece / Decimal(1000) for added_piece in added_pieces]

    try:
        # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await transaction_replenish(outlet_id, product_id, product_qty, added_pieces)
        await callback.answer(text='–ó–∞–ø–∞—Å—ã –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω—ã', show_alert=True)
        await product_control_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)
    
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–≤ –≤ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è


# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
@stock_menu.callback_query(F.data == 'outlet:replenishment:cancel')
async def cancel_replenishment_product_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    product_id = data['product_id']
    
    await callback.message.edit_text(text='‚ùóÔ∏è <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. '\
                                            '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</b>',
                                            parse_mode='HTML',
                                            reply_markup=kb.cancel_replenishment_product(product_id))
    
    
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
@stock_menu.callback_query(F.data == 'outlet:writeoff')
async def product_writeoff_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    if callback.data == 'outlet:writeoff':
        operation = callback.data.split(':')[-1]
        await state.update_data(operation=operation)
    else:
        operation = data['operation']
    
    product_id = data['product_id']
    outlet_id = data['outlet_id']
    added_pieces = data['added_pieces']
    stock_qty = Decimal(data['stock_qty'])
    
    if stock_qty == Decimal(0):
        await callback.answer(text='–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∑–∞–ø–∞—Å–æ–≤', show_alert=True)
        return None
    
    text = await writeoff_text(outlet_id, product_id, added_pieces)
    
    await callback.message.edit_text(text=text,
                                        reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id),
                                        parse_mode='HTML')
    
    await state.set_state(Stock.writeoff)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ
@stock_menu.message(Stock.writeoff)
async def product_writeoff_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    stock_qty = Decimal(data['stock_qty'])
    product_unit = data['product_unit']
    added_pieces = data['added_pieces']
    operation = data['operation']
    
    if product_unit == '–∫–≥':
        stock_qty = stock_qty * Decimal(1000)
    
    text = await writeoff_text(outlet_id, product_id, added_pieces)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        total_qty = product_qty + Decimal(sum(added_pieces))
        
        if product_qty <= 0:
            try:
                await state.set_state(Stock.writeoff)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ò–õ–ò –†–ê–í–ù–û –ù–£–õ–Æ</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id))
                return None
            except TelegramBadRequest:
                return None
        elif stock_qty - total_qty < 0:
            try:
                await state.set_state(Stock.writeoff)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ë–û–õ–¨–®–ï –ó–ê–ü–ê–°–ê</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id))
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.writeoff)
            warning_text = '‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n'
            text = warning_text + text
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text=text,
                                                parse_mode='HTML',
                                                reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id))
            return None
        except TelegramBadRequest:
            return None

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces.append(int(product_qty))
    await state.update_data(added_pieces=added_pieces)
    
    text = await writeoff_text(outlet_id, product_id, added_pieces)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=kb.change_stock_qty_menu(operation, added_pieces, product_id),
                                        parse_mode='HTML')
    
    await state.set_state(Stock.writeoff)


# –¥–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Å–∫–∞ –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∞–Ω–∏–∏
@stock_menu.callback_query(F.data.startswith('outlet:control:correct_piece:piece_id_'))
@stock_menu.callback_query(F.data.startswith('outlet:control:correct_piece:page_'))
@stock_menu.callback_query(F.data == 'outlet:control:correct_piece')
async def correct_piece_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    # —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Å–∫–æ–≤
    if callback.data.startswith('outlet:control:correct_piece:piece_id_'):
        piece_id = int(callback.data.split('_')[-1])
        data = await state.get_data()
        added_pieces = data['added_pieces']
        del added_pieces[piece_id]
        await state.update_data(added_pieces=added_pieces)
        
    data = await state.get_data()
    added_pieces = data['added_pieces']
    operation = data['operation']
    
    if callback.data.startswith('outlet:control:correct_piece:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1

    if len(added_pieces) != 0:
        await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –ö–£–°–û–ö –¢–û–í–ê–†–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø</b>',
                                        reply_markup=kb.choose_correct_piece(operation=operation,
                                                                             added_pieces=added_pieces,
                                                                             page=page),
                                        parse_mode='HTML')
    elif operation == 'writeoff':
        await product_writeoff_handler(callback, state)
    elif operation == 'replenishment':
        await product_replenishment_handler(callback, state)

    
# –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è
@stock_menu.callback_query(F.data == 'outlet:writeoff:calculate')
async def calculate_replenishment_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    product_qty = sum(data['added_pieces'])
    product_unit = data['product_unit']
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    
    stock_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_data['product_name']
    
    if product_unit == '–∫–≥':
        product_unit = product_unit[-1]
    
    await callback.message.edit_text(text=f'–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –Ω–∞ <b>{product_qty} {product_unit}</b>',
                                        reply_markup=kb.confirm_writeoff_product,
                                        parse_mode='HTML')


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
@stock_menu.callback_query(F.data == 'outlet:writeoff:confirm')
async def confirm_writeoff_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    added_pieces = [Decimal(added_piece) for added_piece in data['added_pieces']]
    product_qty = sum(added_pieces)
    product_unit = data['product_unit']

    if product_unit == '–∫–≥':
        product_qty = product_qty / Decimal(1000)
        added_pieces = [added_piece / Decimal(1000) for added_piece in added_pieces]

    try:
        # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await transaction_writeoff(outlet_id, product_id, product_qty, added_pieces)
        await callback.answer(text='–ó–∞–ø–∞—Å—ã –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã', show_alert=True)
        await product_control_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)


# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
@stock_menu.callback_query(F.data == 'outlet:writeoff:cancel')
async def cancel_writeoff_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    product_id = data['product_id']
    
    await callback.message.edit_text(text='‚ùóÔ∏è <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. '\
                                            '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</b>',
                                            parse_mode='HTML',
                                            reply_markup=kb.cancel_writeoff_product(product_id))


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@stock_menu.callback_query(F.data == 'outlet:stock:delete')
async def delete_stock_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    
    stock_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_data['product_name']
    stock_qty = stock_data['stock_qty']
    product_unit = data['product_unit']
    
    if stock_qty > 0:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∑–∞–ø–∞—Å–∞–º–∏', show_alert=True)
        return None
    
    if product_unit == '–∫–≥':
        product_unit = product_unit[-1]
        
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']
    await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä <b>{product_name}</b> –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ <b>{outlet_name}</b>',
                                    reply_markup=kb.confirm_delete(product_id),
                                    parse_mode='HTML')


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–ø–∞—Å–æ–≤
@stock_menu.callback_query(F.data == 'outlet:stock:delete:confirm')
async def confirm_stock_delete_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_id = data['outlet_id']
    product_id = data['product_id']

    try:
        # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await transaction_delete_product(outlet_id, product_id)
        await callback.answer(text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏', show_alert=True)
        await choose_product_control_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)


# –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
@stock_menu.callback_query(F.data.startswith('outlet:control:transactions:page_'))
@stock_menu.callback_query(F.data == 'outlet:control:transactions')
@stock_menu.callback_query(F.data == 'outlet:control:transactions:back')
async def choose_transaction_product_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    if callback.data.startswith('outlet:control:transactions:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    elif callback.data == 'outlet:control:transactions':
        page = 1
    else:
        page = data['page']
        
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
    await state.update_data(page=page)
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    
    stock_data = await get_stock_product(outlet_id, product_id)
    stock_id = stock_data['stock_id']
    product_unit = stock_data['product_unit']
    
    transactions_data = await transactions_info(outlet_id, stock_id)
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ</b>',
                                     reply_markup=kb.choose_transaction(transactions_data, product_unit, product_id, page=page),
                                     parse_mode='HTML')
    

# –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@stock_menu.callback_query(F.data.startswith('outlet:control:transactions:transaction_id_'))
async def transaction_product_handler(callback: CallbackQuery, state: FSMContext):
    
    transaction_id = int(callback.data.split('_')[-1])
    
    data = await state.get_data()
    outlet_id = data['outlet_id']
    
    product_id = data['product_id']
    stock_data = await get_stock_product(outlet_id, product_id)
    product_unit = stock_data['product_unit']
    
    transaction = await transaction_info(transaction_id)
    
    transaction_product_name = transaction['transaction_product_name']
    transaction_datetime = represent_utc_3(transaction['transaction_datetime']).strftime('%H:%M %d-%m-%Y')
    transaction_type_labels = {
        'balance': ['–ü—Ä–æ–¥–∞–∂–∞ (–æ—Å—Ç.)', '–†–∞—Å—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', '–ß–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å—Ç–∞—Ç–∫–µ:'],
        'selling': ['–ü—Ä–æ–¥–∞–∂–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',  '–ß–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ:'],
        'replenishment': ['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',  '–ß–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏:'],
        'writeoff': ['–°–ø–∏—Å–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∞–Ω–∏–∏',  '–ß–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∞–Ω–∏–∏:']
    }
    
    try:
        transaction_type = transaction_type_labels[transaction['transaction_type']][0]
        transaction_qty_phrase = transaction_type_labels[transaction['transaction_type']][1]
        transaction_parts_phrase = transaction_type_labels[transaction['transaction_type']][2]
    except KeyError:
        transaction_type = None
        transaction_qty_phrase = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        transaction_parts_phrase = '–ß–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞:'
    
    product_qty = transaction['product_qty']
    balance_after = transaction['balance_after']
    
    if product_unit == '–∫–≥':
        product_qty = product_qty * Decimal(1000)
        balance_after = balance_after * Decimal(1000)
        product_unit = '–≥'
        
    transaction_id = transaction['transaction_id']
    transaction_parts = transaction['transaction_info']
    
    text = f'<b>–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø ‚Ññ{transaction_id}</b>\n\n' \
            f'–¢–æ–≤–∞—Ä - <b>{transaction_product_name}</b>\n' \
            f'–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è - <b>{transaction_datetime}</b>\n' \
            f'–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - <b>{transaction_type}</b>\n' \
            f'{transaction_qty_phrase} - <b>{round(product_qty)} {product_unit}</b>\n' \
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - <b>{round(balance_after)} {product_unit}</b>\n' \
                
    if not transaction_parts is None and len(transaction_parts) > 1:
        text += f'{transaction_parts_phrase}\n'
        for part in transaction_parts:
            if product_unit != '—à—Ç.':
                part = part * Decimal(1000)
            
            text += f'- <b>{round(part)} {product_unit}</b>\n'
        
    
    await callback.message.edit_text(text=text,
                                     parse_mode='HTML',
                                     reply_markup=kb.transaction_menu)