from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal

import app.main_menu.outlets_menu.outlet_menu.outlet_operations.keyboard as kb
from app.com_func import represent_utc_3
from app.states import Stock
from app.database.all_requests.stock import get_active_stock_products, get_stock_product
from app.database.all_requests.transactions import get_last_transaction, transaction_selling, transaction_balance
from app.database.requests import get_outlet

outlet_operations = Router()


async def balance_text(outlet_id, product_id, added_pieces):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
        product_unit_pieces = '–≥'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        product_unit_pieces = '—à—Ç.'
        stock_qty = int(stock_qty)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces_text = ''
    if len(added_pieces) != 0:
        added_pieces_text = '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–º:\n'
        for added_piece in added_pieces:
            added_pieces_text += f'<b>{added_piece} {product_unit_pieces}</b>\n'
        added_pieces_text += f'–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫ - <b>{sum(added_pieces)} {product_unit_pieces}</b>\n'
    
    text = '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –û–°–¢–ê–¢–û–ö –ü–†–û–î–£–ö–¢–ê </b>\n\n' \
            f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
            f'\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>. ' \
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∞—Å—Ç–∞–º–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —Å—É–º–º–∞—Ä–Ω–æ–µ.\n' \
            f'{added_pieces_text}' \
            '\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ <b>–†–∞—Å—á–∏—Ç–∞—Ç—å</b> –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.'
    
    return text, float(stock_qty), product_unit



# –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_operations.callback_query(F.data == 'outlet:operations')
async def operations_menu_handler(callback: CallbackQuery, state: FSMContext):
    # —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –ø—Ä–æ–¥–∞–∂–∏ –±—ã–ª–æ –ø—É—Å—Ç–æ
    await state.update_data(added_pieces=[])
    
    await callback.message.edit_text(text='üß∞ <b>–ú–ï–ù–Æ –û–ü–ï–†–ê–¶–ò–ô</b>',
                                     reply_markup=kb.operations_menu,
                                     parse_mode='HTML')


# –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–ø–∞—Å–æ–≤
@outlet_operations.callback_query(F.data == 'outlet:selling')
async def selling_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_pieces = data['added_pieces']
    
    text = 'üí∏ <b>–†–ê–°–ß–ï–¢ –û–°–¢–ê–¢–ö–ê –ü–û –ü–†–û–î–ê–ñ–ê–ú</b>\n\n'\
            '–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n'
            
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces_text = ''
    # if len(added_pieces) != 0:
    #     added_pieces_text = '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n'
    #     for added_piece in added_pieces:
    #         added_pieces_text += f'<b>{added_piece} {product_unit_pieces}</b>\n'
    #     added_pieces_text += f'–ò—Ç–æ–≥–æ –∫ –ø—Ä–æ–¥–∞–∂–µ - <b>{sum(added_pieces)} {product_unit_pieces}</b>\n'
    
    text += added_pieces_text
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.selling(added_pieces),
                                     parse_mode='HTML'
                                        )
  
  
# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
@outlet_operations.callback_query(F.data == 'outlet:selling:cancel')
async def cancel_selling_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='‚ùóÔ∏è <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞. '\
                                            '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</b>',
                                            parse_mode='HTML',
                                            reply_markup=kb.selling_cancel)

    
# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
@outlet_operations.callback_query(F.data.startswith('outlet:selling:page_'))
@outlet_operations.callback_query(F.data == 'outlet:selling:add_product')
async def choose_product_selling_handler(callback: CallbackQuery, state: FSMContext):
    
    if callback.data.startswith('outlet:selling:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    
    data = await state.get_data()
    outlet_id = data['outlet_id']
    stock_data = await get_active_stock_products(outlet_id)
    stock_data = [stock for stock in stock_data if stock['stock_qty'] != 0]
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>',
                                     reply_markup=kb.choose_product_selling(stock_data=stock_data, page=page),
                                     parse_mode='HTML')
    

# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
@outlet_operations.callback_query(F.data.startswith('outlet:selling:product_id_'))
async def product_selling_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –∫–æ–ª–±—ç–∫—É
    if callback.data.startswith('outlet:selling:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        await state.update_data(product_id=product_id)
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏
    else:
        product_id = data['product_id']
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    stock_id = stock_product_data['stock_id']
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º –¥–æ—Å—Ç–∞–µ–º –µ–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç
    last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
                                                       stock_id=stock_id,
                                                       transaction_type='selling')
    last_transaction_text = ''
    if last_transaction_data:
        transaction_datetime = represent_utc_3(last_transaction_data['transaction_datetime']).strftime('–≤ %H:%M %d-%m-%Y')
        transaction_product_qty = last_transaction_data['product_qty']
        
        # –µ—Å–ª–∏ –Ω–µ –∫–∏–ª–æ–≥—Ä–∞–º—ã, —É–±–∏—Ä–∞–µ–º –Ω—É–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if product_unit != '–∫–≥':
            transaction_product_qty = round(transaction_product_qty)
        last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ - <b>üí≤{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
    
    await callback.message.edit_text(text='‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>\n\n' \
                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                        f'{last_transaction_text}' \
                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.',
                                    reply_markup=kb.selling_product,
                                    parse_mode='HTML')
    
    await state.set_state(Stock.selling)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
@outlet_operations.message(Stock.selling)
async def product_selling_receiver_handler(message: Message, state: FSMContext):
    
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data.outlet_name
    
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    stock_id = stock_product_data['stock_id']
    
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
        
    # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    last_transaction_data = await get_last_transaction(outlet_id=outlet_id,
                                                       stock_id=stock_id,
                                                       transaction_type='selling')
    last_transaction_text = ''
    if last_transaction_data:
        transaction_datetime = represent_utc_3(last_transaction_data['transaction_datetime']).strftime('–≤ %H:%M %d-%m-%Y')
        transaction_product_qty = last_transaction_data['product_qty']
        
        if product_unit != '–∫–≥':
            transaction_product_qty = round(transaction_product_qty)
            
        last_transaction_text = f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ - <b>üí≤{transaction_product_qty} {product_unit} ({transaction_datetime})</b>\n'
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        if product_unit == '–∫–≥':
            product_qty = product_qty / Decimal(1000)
        
        if product_qty == 0:
            try:
                await state.set_state(Stock.selling)
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text='‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –†–ê–í–ù–û –ù–£–õ–Æ!</b>\n\n' \
                                                        '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>\n\n' \
                                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                        f'{last_transaction_text}' \
                                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.',
                                                    parse_mode='HTML',
                                                    reply_markup=kb.selling_product)
                return None
            except TelegramBadRequest:
                return None
        elif stock_qty - product_qty < 0:
            try:
                await state.set_state(Stock.selling)
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text='‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –î–õ–Ø –°–ü–ò–°–ê–ù–ò–Ø –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ó–ê–ü–ê–°–ê</b>\n\n' \
                                                        '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>\n\n' \
                                                        f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                        f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                        f'{last_transaction_text}' \
                                                        f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.',
                                                    parse_mode='HTML',
                                                    reply_markup=kb.selling_product)
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.selling)
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n' \
                                                    '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>\n\n' \
                                                    f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
                                                    f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
                                                    f'{last_transaction_text}' \
                                                    f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.',
                                                parse_mode='HTML',
                                                reply_markup=kb.selling_product)
            return None
        except TelegramBadRequest:
            return None

    # —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
    await transaction_selling(outlet_id, product_id, product_qty)
    
    # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    stock_data = await get_active_stock_products(outlet_id)

    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>',
                                        reply_markup=kb.choose_product_selling(stock_data=stock_data),
                                        parse_mode='HTML')
    
    
# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞
@outlet_operations.callback_query(F.data.startswith('outlet:balance:page_'))
@outlet_operations.callback_query(F.data == 'outlet:balance')
async def choose_product_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await state.update_data(added_pieces=[])
    
    if callback.data.startswith('outlet:balance:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    
    data = await state.get_data()
    outlet_id = data['outlet_id']
    stock_data = await get_active_stock_products(outlet_id)
    stock_data = [stock for stock in stock_data if stock['stock_qty'] != 0]
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –£–ö–ê–ó–ê–ù–ò–Ø –û–°–¢–ê–¢–ö–ê</b>',
                                     reply_markup=kb.choose_product_balance(stock_data=stock_data, page=page),
                                     parse_mode='HTML')


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç—è–º–∏ –∏–ª–∏ —Å—Ä–∞–∑—É
@outlet_operations.callback_query(F.data.startswith('outlet:balance:product_id_'))
async def product_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –∫–æ–ª–±—ç–∫—É
    if callback.data.startswith('outlet:balance:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        await state.update_data(product_id=product_id)
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏
    else:
        product_id = data['product_id']
    
    outlet_id = data['outlet_id']
    added_pieces = data['added_pieces']
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text, stock_qty, product_unit = await balance_text(outlet_id, product_id, added_pieces)
    
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
    await state.update_data(stock_qty=stock_qty,
                            product_unit=product_unit)
    
    await callback.message.edit_text(text=text,
                                    reply_markup=kb.balance_product(added_pieces),
                                    parse_mode='HTML')
    
    await state.set_state(Stock.balance)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –æ—Å—Ç–∞—Ç–∫—É
@outlet_operations.message(Stock.balance)
async def product_balance_receiver_handler(message: Message, state: FSMContext):
    
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    added_pieces = data['added_pieces']
    stock_qty = Decimal(data['stock_qty'])
    product_unit = data['product_unit']

    text = (await balance_text(outlet_id, product_id, added_pieces))[0]
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    if product_unit == '–∫–≥':
        stock_qty = stock_qty * (Decimal(1000))
    else:
        stock_qty = round(stock_qty)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        if product_qty <= 0:
            try:
                await state.set_state(Stock.balance)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ò–õ–ò –†–ê–í–ù–û –ù–£–õ–Æ</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.balance_product(added_pieces))
                return None
            except TelegramBadRequest:
                return None
        elif stock_qty - product_qty < 0:
            try:
                await state.set_state(Stock.balance)
                warning_text = '‚ùó<b>–ö–£–°–û–ö –ù–ï –ú–û–ñ–ï–¢ –ò–ú–ï–¢–¨ –ú–ê–°–°–£ –ë–û–õ–¨–®–ï –ó–ê–ü–ê–°–ê</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.balance_product(added_pieces))
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.balance)
            warning_text = '‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n'
            text = warning_text + text
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text=text,
                                                parse_mode='HTML',
                                                reply_markup=kb.balance_product(added_pieces))
            return None
        except TelegramBadRequest:
            return None

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces.append(int(product_qty))
    await state.update_data(added_pieces=added_pieces)

    text = (await balance_text(outlet_id, product_id, added_pieces))[0]

    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        parse_mode='HTML',
                                        reply_markup=kb.balance_product(added_pieces))
    
    await state.set_state(Stock.balance)


# –¥–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Å–∫–∞ –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@outlet_operations.callback_query(F.data.startswith('outlet:balance:correct_piece:piece_id_'))
@outlet_operations.callback_query(F.data.startswith('outlet:balance:correct_piece:page_'))
@outlet_operations.callback_query(F.data == 'outlet:balance:correct_piece')
async def choose_balance_selling_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    # —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Å–∫–æ–≤
    if callback.data.startswith('outlet:balance:correct_piece:piece_id_'):
        piece_id = int(callback.data.split('_')[-1])
        data = await state.get_data()
        added_pieces = data['added_pieces']
        del added_pieces[piece_id]
        await state.update_data(added_pieces=added_pieces)
        
    data = await state.get_data()
    added_pieces = data['added_pieces']
    product_id = data['product_id']
    
    if callback.data.startswith('outlet:balance:correct_piece:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1

    if len(added_pieces) != 0:
        await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –ö–£–°–û–ö –¢–û–í–ê–†–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø</b>',
                                        reply_markup=kb.choose_product_correct_piece(product_id=product_id,
                                                                                    added_pieces=added_pieces,
                                                                                    page=page),
                                        parse_mode='HTML')
    else:
        await product_balance_handler(callback, state)
    

# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
@outlet_operations.callback_query(F.data == 'outlet:balance:cancel')
async def cancel_balance_product_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    
    await callback.message.edit_text(text='‚ùóÔ∏è <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫—É. '\
                                            '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</b>',
                                            parse_mode='HTML',
                                            reply_markup=kb.cancel_balance_product(product_id))
    
    
# –º–µ–Ω—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
@outlet_operations.callback_query(F.data == 'outlet:balance:calculate')
async def calculate_balance_product_handler(callback: CallbackQuery, state: FSMContext):  
    data = await state.get_data()
    added_pieces = data['added_pieces']
    product_id = data['product_id']
    outlet_id = data['outlet_id']
    added_pieces_sum = sum(added_pieces)
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']

    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    if product_unit == '–∫–≥':
        stock_qty = stock_qty * (Decimal(1000))
        product_unit = product_unit[-1]
        
    stock_qty = round(stock_qty)
    
    # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ –∑–∞–ø–∞—Å–æ–≤, –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
    if Decimal(added_pieces_sum) > stock_qty:
        await callback.answer(text='‚ùóÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. \n' \
                                    '–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø–∞—Å–æ–≤.',
                                    show_alert=True)
        return None
    # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–µ–Ω –∑–∞–ø–∞—Å—É
    elif Decimal(added_pieces_sum) == stock_qty:
        await callback.message.edit_text(text=f'–û—Å—Ç–∞—Ç–æ–∫ <b>{added_pieces_sum} {product_unit}</b> —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> —Ä–∞–≤–µ–Ω –µ–≥–æ –∑–∞–ø–∞—Å—É <b>{stock_qty} {product_unit}</b>\n' \
                                                '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>.',
                                                parse_mode='HTML',
                                                reply_markup=kb.confirm_balance_product(product_id))
    # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ –∑–∞–ø–∞—Å, —Ç–æ –≤—Å–µ –æ–∫–µ–π
    else:
        stock_diff = stock_qty - added_pieces_sum
        await callback.message.edit_text(text=f'–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É <b>{stock_diff} {product_unit}</b> —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b>.\n' \
                                                '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>.',
                                                parse_mode='HTML',
                                                reply_markup=kb.confirm_balance_product(product_id))
        
        
# –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
@outlet_operations.callback_query(F.data == 'outlet:balance:confirm')
async def confirm_balance_product_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_pieces = data['added_pieces']
    product_id = data['product_id']
    outlet_id = data['outlet_id']
    product_unit = data['product_unit']
    
    product_qty = Decimal(sum(added_pieces))
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    if product_unit == '–∫–≥':
        product_qty = product_qty / (Decimal(1000))
    
    await transaction_balance(outlet_id, product_id, product_qty)
    await callback.answer(text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', show_alert=True)
    await choose_product_balance_handler(callback, state)
    
    