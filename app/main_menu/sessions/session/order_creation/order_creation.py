import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal
from datetime import datetime, time
import pytz

import app.main_menu.sessions.session.order_creation.keyboard as kb
from app.main_menu.sessions.session.session_menu import session_menu_handler
from app.main_menu.main_menu import main_menu_handler
from app.com_func import represent_utc_3
from app.states import Order, Product
from app.database.requests import get_product, add_order, add_order_items, get_session_by_name, get_session


order_creation = Router()


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def order_text(data):
    products_list = [product_data for product_data in data.keys() if product_data.startswith('product_data_')]
    
    text = f'üìã <b>–ú–ï–ù–Æ –ó–ê–ö–ê–ó–ê</b>\n\n'
    
    if data['client_name']:
        text += f'üë§ –ö–ª–∏–µ–Ω—Ç - <b>{data['client_name']}</b>\n'
           
    if data['client_phone']:
        text += f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω - <b>{data['client_phone']}</b>\n'
        
    text += f'üìÇ –°–µ—Å—Å–∏—è - <b>{data['session_name']}</b>\n'
    
    if products_list:
        text += '\nüßÄ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n'
        
        for product in products_list:
            product_name = data[product]['product_name']
            product_qty = data[product]['product_qty']
            product_unit = data[product]['product_unit']
            item_vacc = data[product]['item_vacc']
            # item_disc = data[product]['item_disc']
            
            product_unit_amend = product_unit
            if product_unit_amend == '–∫–≥':
                product_unit_amend = '–≥'
                
            if item_vacc:
                item_vacc = ' (–≤–∞–∫. —É–ø.)'
            else:
                item_vacc = ''
            
            text += f'<b>{product_name}{item_vacc} - {product_qty} {product_unit_amend}</b>\n'
            
        if data['order_disc'] != 0:
            text += f'\nü§ë –°–∫–∏–¥–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ - <b>{data['order_disc']} %</b>\n'
    
    text += f'\nüõç –ú–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏ - <b>{data['issue_method']}</b>\n'
    
    issue_method = data['issue_method']
    issue_opt = '–¥–æ—Å—Ç–∞–≤–∫–∏'
    if issue_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        issue_opt = '–≤—ã–¥–∞—á–∏'
    
    if data['issue_place']:
        text += f'üìç –ú–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏ - <b>{data['issue_place']}</b>\n'
    if data['issue_datetime']:
        text += f'üìÖ –î–∞—Ç–∞ {issue_opt} - <b>{data['issue_datetime']['day']:02d}-{data['issue_datetime']['month']:02d}-{data['issue_datetime']['year']}</b>\n'
        if 'hour' in data['issue_datetime'].keys():
            text += f'‚åöÔ∏è –í—Ä–µ–º—è {issue_opt} - <b>{data['issue_datetime']['hour']:02d}:{data['issue_datetime']['minute']:02d}</b>\n'

    
    if data['order_note']:
        text += f'\n<b>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>\n{data['order_note']}'
        
    return text


# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
@order_creation.callback_query(F.data == 'main:new_order')
@order_creation.callback_query(F.data == 'session:new_order')
async def new_order_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_default = await get_session_by_name(session_name='‚≠êÔ∏è –í—Ö–æ–¥—è—â–∏–µ')
    session_id = data['session_id'] if 'session_id' in data.keys() else session_default.session_id
    session = await get_session(session_id)
    initial_data = {
        'next_product_number': 0, # –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ FSMContext
        'order_note': None,
        'order_disc': 0,
        'back_opt': f'{callback.data.split(':')[0]}:menu',
        'chat_id': callback.message.chat.id,
        'message_id': callback.message.message_id,
        'session_id': session_id,
        'session_name': session.session_name,
        'issue_method': '–°–∞–º–æ–≤—ã–≤–æ–∑',
        'issue_place': None,
        'issue_datetime': None
    }
    
    await state.update_data(initial_data)
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    if callback.data == 'main:new_order':
        back_opt = 'main:menu'
    else:
        back_opt = 'back_from_order_creation'
        
    await callback.message.edit_text(text='‚ùì <b>–í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ö–õ–ò–ï–ù–¢–ê</b> \n\n' \
                                        '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. ' \
                                        '–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ù–ï –º–æ–ª–¥–∞–≤—Å–∫–∏–π —Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–∞—á–∏–Ω–∞—è—Å—å —Å +</i>',
                                     reply_markup=kb.client_phone_cancelation(back_opt),
                                     parse_mode='HTML')
    await state.set_state(Order.client_phone)
    
    
# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
@order_creation.callback_query(F.data == 'new_order:skip_phone')
async def skip_phone_handler(callback: CallbackQuery, state: FSMContext):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    data = await state.get_data()
    back_opt = data['back_opt']
    if back_opt != 'main:menu':
        back_opt = 'back_from_order_creation'
    
    await callback.message.edit_text('‚ùì <b>–í–í–ï–î–ò–¢–ï –ò–ú–Ø –ö–õ–ò–ï–ù–¢–ê</b>',
                                     reply_markup=kb.client_name_cancelation(back_opt),
                                     parse_mode='HTML')
    # –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –¥–∞–ª—å—à–µ–π–Ω–µ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await state.update_data(client_phone=None)
    await state.set_state(Order.client_name)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏/–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–ø–∞–¥–∞–µ–º –≤ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@order_creation.message(Order.client_phone)
@order_creation.message(Order.client_name)
async def order_menu_handler(message: Message, state: FSMContext):
    state_name = str(await state.get_state()).split(':')[-1]
    await state.set_state(None)
    
    if state_name == 'client_name':  
        await state.update_data(client_name=message.text)
        data = await state.get_data()
        # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        text = order_text(data)
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text=text,
                                            reply_markup=kb.new_order_keyboard,
                                            parse_mode='HTML')
    elif state_name == 'client_phone':
        data = await state.get_data()
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_opt = data['back_opt']
        if back_opt != 'main:menu':
            back_opt = 'back_from_order_creation'
        
        client_phone = message.text 
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤ –≤ –Ω–æ–º–µ—Ä–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if re.search(r'[A-Za-z–ê-–Ø–∞-—è]', client_phone) or not re.search(r'\d', client_phone):
            try:
                await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                    message_id=data['message_id'],
                                                    text='‚ùóÔ∏è <b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•</b> \n\n' \
                                                        '‚ùì <b>–í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ö–õ–ò–ï–ù–¢–ê</b> \n\n' \
                                                        '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. ' \
                                                        '–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ù–ï –º–æ–ª–¥–∞–≤—Å–∫–∏–π —Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–∞—á–∏–Ω–∞—è—Å—å —Å +</i>',
                                                    reply_markup=kb.client_phone_cancelation(back_opt),
                                                    parse_mode='HTML')
                await state.set_state(Order.client_phone)
                return None
            except TelegramBadRequest:
                await state.set_state(Order.client_phone)
                return None
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∫–æ–¥–∞, –∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–ª–¥–∞–≤—Å–∫–∏–π
        client_phone = re.sub(r'[^\d+]', '', client_phone).lstrip('0')
        if client_phone.startswith('373'):
            client_phone = '+' + client_phone
        elif client_phone.startswith('+'):
            pass
        else:
            client_phone = '+373' + client_phone
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.update_data(client_phone=client_phone)
        
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text='‚ùì <b>–í–í–ï–î–ò–¢–ï –ò–ú–Ø –ö–õ–ò–ï–ù–¢–ê</b>',
                                            reply_markup=kb.client_name_cancelation(back_opt),
                                            parse_mode='HTML')
        await state.set_state(Order.client_name)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
@order_creation.callback_query(F.data == 'new_order:menu')
@order_creation.callback_query(F.data == 'new_order:delete_time')
@order_creation.callback_query(F.data == 'new_order:delete_date')
async def back_to_order_creation_handler(callback: CallbackQuery, state: FSMContext):
    # –≤ —Å–ª—É—á–∞–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–∞—á–∏
    if callback.data == 'new_order:delete_date':
        await state.update_data(issue_datetime=None)
    elif callback.data == 'new_order:delete_time':
        data = await state.get_data()
        issue_datetime = data['issue_datetime']
        issue_datetime = {
            'day': issue_datetime['day'],
            'month': issue_datetime['month'],
            'year': issue_datetime['year']
        }
        await state.update_data(issue_datetime=issue_datetime)
        
    
    await state.set_state(None)
    data = await state.get_data()
    text = order_text(data)
    
    await callback.message.edit_text(text=text,
                                    reply_markup=kb.new_order_keyboard,
                                    parse_mode='HTML')


# –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@order_creation.callback_query(F.data.startswith('product_page_'))
@order_creation.callback_query(F.data == 'new_order:add_product')
async def choose_product_handler(callback: CallbackQuery):
    if callback.data.startswith('product_page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    await callback.message.edit_text(text='‚ùì <b> –í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–†</b>',
                                     reply_markup=await kb.choose_product(page=page),
                                     parse_mode='HTML')


# –ü—Ä–æ–¥—É–∫—Ç –≤—ã–±—Ä–∞–ª–∏, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤–µ—Å
@order_creation.callback_query(F.data.startswith('product_id_'))
async def add_product_handler(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split('_')[-1])
    product_data =  await get_product(product_id=product_id) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–º–µ–Ω—ã
    
    product_name = product_data.product_name
    product_price = float(product_data.product_price)
    product_unit = product_data.product_unit
    
    product_unit_amend = product_unit
    if product_unit_amend == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    await state.update_data(product_id=product_id,
                            product_name=product_name,
                            product_price=product_price,
                            product_unit=product_unit,
                            product_unit_amend=product_unit_amend)
        
    await callback.message.edit_text(text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: <b>{product_name} - {product_price} —Ä/{product_unit}\n</b>' \
                                        f'–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ {product_unit_amend}',
                                        reply_markup=kb.back_to_order_creation,
                                        parse_mode='HTML')
    await state.set_state(Product.qty)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ FSMContext –≤–∫–ª—é—á–∞—è –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –∏ —Å–Ω–æ–≤–∞ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∑–∞–∫–∞–∑–∞
@order_creation.message(Product.qty)
async def product_qty_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç
    try:
        qty = str(Decimal(message.text.replace(',', '.')))
        if Decimal(qty) == 0:
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –†–ê–í–ù–û –ù–£–õ–Æ!</b>‚ùó\n\n' \
                                                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: <b>{data['product_name']} - {data['product_price']} —Ä/{data['product_unit']}\n</b>' \
                                                    f'–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ {data["product_unit_amend"]}',
                                                parse_mode='HTML',
                                                reply_markup=kb.back_to_order_creation)
            return None
    except:
        try:
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>‚ùó\n\n' \
                                                    '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä –∏ –æ–¥–Ω–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è: <i>123.45</i>\n\n' \
                                                    f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: <b>{data['product_name']} - {data['product_price']} —Ä/{data['product_unit']}\n</b>'  \
                                                    f'–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ {data["product_unit_amend"]}',
                                                parse_mode='HTML',
                                                reply_markup=kb.back_to_order_creation)
            return None
        except TelegramBadRequest:
            return None
    
    product_data =  await get_product(product_id=data['product_id'])
    product_data_dict = {
        'product_name': product_data.product_name,
        'product_price': str(product_data.product_price),
        'product_unit': product_data.product_unit,
        'product_qty': qty,
        'item_vacc': False,
        'item_disc': data['order_disc']
    }
    
    product_number = data['next_product_number']
    await state.update_data({f'product_data_{product_number}': product_data_dict, # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ FSMContext —Å –∫–ª—é—á–µ–º product_i
                             'next_product_number': product_number + 1,  # i —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1 –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                             'current_product': f'product_data_{product_number}' # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                             })
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    text = order_text(data)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=text,
                                        reply_markup=kb.new_order_keyboard,
                                        parse_mode='HTML')
    


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–∫–∞–∑–µ
@order_creation.callback_query(F.data.startswith('new_order:change_session_id_'))
@order_creation.callback_query(F.data == 'new_order:change_order')
async def change_order_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('new_order:change_session_id_'):
        session_id = int(callback.data.split('_')[-1])
        session = await get_session(session_id)
        await state.update_data(session_id=session_id, session_name=session.session_name)
        
    data = await state.get_data()
    text = order_text(data)
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.change_order_keyboard,
                                     parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
@order_creation.callback_query(F.data == 'new_order:change_name')
async def change_name_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='‚ùì <b>–í–í–ï–î–ò–¢–ï –ù–û–í–û–ï –ò–ú–Ø –ö–õ–ò–ï–ù–¢–ê</b>',
                                     reply_markup=kb.back_to_order_changing,
                                     parse_mode='HTML')
    await state.set_state(Order.change_client_name)
    
    
# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
@order_creation.callback_query(F.data == 'new_order:change_phone')
async def change_name_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='‚ùì <b>–í–í–ï–î–ò–¢–ï –ù–û–í–´–ô –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ö–õ–ò–ï–ù–¢–ê</b>',
                                     reply_markup=kb.back_to_order_changing,
                                     parse_mode='HTML')
    await state.set_state(Order.change_client_phone)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏/–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–ø–∞–¥–∞–µ–º –≤ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@order_creation.message(Order.change_client_phone)
@order_creation.message(Order.change_client_name)
async def change_order_data_handler(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –æ–±–Ω—É–ª—è–µ–º –µ–≥–æ
    state_name = str(await state.get_state()).split(':')[-1]
    await state.set_state(None)
    data = await state.get_data()
    
    if state_name == 'change_client_name':
        await state.update_data(client_name=message.text)


    elif state_name == 'change_client_phone':
        client_phone = message.text 
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤ –≤ –Ω–æ–º–µ—Ä–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if re.search(r'[A-Za-z–ê-–Ø–∞-—è]', client_phone) or not re.search(r'\d', client_phone):
            try:
                await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                    message_id=data['message_id'],
                                                    text='‚ùóÔ∏è <b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•</b> \n\n' \
                                                        '‚ùì <b>–í–í–ï–î–ò–¢–ï –ù–û–í–´–ô –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –ö–õ–ò–ï–ù–¢–ê</b> \n\n' \
                                                        '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. ' \
                                                        '–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ù–ï –º–æ–ª–¥–∞–≤—Å–∫–∏–π —Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–∞—á–∏–Ω–∞—è—Å—å —Å +</i>',
                                                    reply_markup=kb.back_to_order_changing,
                                                    parse_mode='HTML')
                await state.set_state(Order.client_phone)
                return None
            except TelegramBadRequest:
                await state.set_state(Order.client_phone)
                return None
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –∫–æ–¥–∞, –∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–ª–¥–∞–≤—Å–∫–∏–π
        client_phone = re.sub(r'[^\d+]', '', client_phone).lstrip('0')
        if client_phone.startswith('373'):
            client_phone = '+' + client_phone
        elif client_phone.startswith('+'):
            pass
        else:
            client_phone = '+373' + client_phone
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.update_data(client_phone=client_phone)
        
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    text = order_text(data)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=text,
                                        reply_markup=kb.change_order_keyboard,
                                        parse_mode='HTML')


# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@order_creation.callback_query(F.data.startswith('product_data_page_'))
@order_creation.callback_query(F.data == 'change_product')
async def choose_change_product_handler(callback: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    if callback.data.startswith('product_data_page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    data = await state.get_data()
    products = {product:data[product] for product in data.keys() if product.startswith('product_data_')}
    if len(products) == 0:
        await callback.answer(text='–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ', show_alert=True)
    else:
        await callback.message.edit_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>',
                                     reply_markup= await kb.change_product_keyboard(products, page=page),
                                     parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@order_creation.callback_query(F.data.startswith('product_data_')) # –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —ç—Ç–æ —É—Å–ª–æ–≤–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
async def change_product_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_data = data[callback.data]
    
    product_name = product_data['product_name']
    product_unit = product_data['product_unit']
    product_qty = product_data['product_qty']
    
    product_unit_amend = product_unit
    if product_unit_amend == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    await state.update_data(product_name=product_name,
                            product_unit=product_unit,
                            product_qty=product_qty,
                            product_unit_amend=product_unit_amend)
        
    await callback.message.edit_text(text=f'<b>{product_name} - {product_qty} {product_unit_amend[0]}\n</b>' \
                                        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ {product_unit_amend}. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ 0',
                                        reply_markup=kb.back_to_order_creation,
                                        parse_mode='HTML')
    
    await state.set_state(Product.new_qty)
    await state.update_data(current_product=callback.data)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–µ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞
@order_creation.message(Product.new_qty)
async def new_qty_product_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç
    try:
        qty = str(Decimal(message.text.replace(',', '.')))
    except:
        try:
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>‚ùó\n\n' \
                                                    '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä –∏ –æ–¥–Ω–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è: <i>123.45</i>\n\n' \
                                                    f'<b>{data['product_name']} - {data['product_qty']} {data['product_unit_amend'][0]}\n</b>'  \
                                                    f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ {data["product_unit_amend"]}. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ 0',
                                                parse_mode='HTML',
                                                reply_markup=kb.back_to_order_creation)
            return None
        except TelegramBadRequest:
            return None
        
    if qty == '0':
        data = {key:value for key, value in data.items() if key != data['current_product']}
        await state.clear()
        await state.update_data(data)
    else:
        current_product = data['current_product']
        data[current_product]['product_qty'] = qty
        await state.clear()
        await state.update_data(data)
        
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    text = order_text(data)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=text,
                                        reply_markup=kb.new_order_keyboard,
                                        parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
@order_creation.callback_query(F.data == 'add_note')
async def add_note_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = '<b>–í–≤–µ–¥–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>\n'
    if data['order_note']:
        text += f'\n<b>–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b>\n{data['order_note']}'
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.note_removal,
                                     parse_mode='HTML')
    await state.set_state(Order.add_note)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@order_creation.callback_query(F.data == 'note_removal')
async def add_note_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await state.update_data(order_note=None)
    await back_to_order_creation_handler(callback, state)


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
@order_creation.message(Order.add_note)
async def add_note_handler(message: Message, state: FSMContext):
    order_note = message.text
    await state.update_data(order_note=order_note)
    await state.set_state(None)
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    
    data = await state.get_data()
    text = order_text(data)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=text,
                                        reply_markup=kb.new_order_keyboard,
                                        parse_mode='HTML')


# –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@order_creation.callback_query(F.data == 'save_order')
async def save_order_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>',
                                     reply_markup=kb.order_confirmation,
                                     parse_mode='HTML')
    

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@order_creation.callback_query(F.data == 'confirm_order_creation')
async def confirm_order_creation_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_id = data['session_id']
    
    # tz = pytz.timezone("Europe/Chisinau")
    # localized_midnight = tz.localize(datetime.combine(datetime.now(tz).date(), time(0, 0)))

    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # order_number = await get_new_last_number(data['session_id']) + 1
    order_data = {
        'session_id': data['session_id'],
        'client_name': data['client_name'],
        'client_phone': data['client_phone'],
        # 'order_number': order_number,
        'order_note': data['order_note'],
        'order_disc': data['order_disc'],
        'order_completed': False,
        'issue_method': data['issue_method'],
        'issue_place': data['issue_place'],
        'issue_datetime': represent_utc_3(datetime(**data['issue_datetime'])) if data['issue_datetime'] else None,
        # 'creation_datetime': localized_midnight
    }
    order_id = await add_order(order_data, session_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # order_id = await get_order_id(data['session_id'], order_number)
    items_data = [{'order_id': order_id} | data[product] for product in data.keys() if product.startswith('product_data_')]
    await add_order_items(items_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await callback.answer('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', show_alert=True)
    if data['back_opt'] == 'session:menu':
        await session_menu_handler(callback, state)
    else:
        await main_menu_handler(callback, state)

    
@order_creation.callback_query(F.data == 'confirm_order_cancelation')
async def confirm_order_cancelation_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_opt = data['back_opt']
    if back_opt != 'main:menu':
        back_opt = 'back_from_order_creation'
    await callback.message.edit_text(text='‚ùó<b>–í–ù–ò–ú–ê–ù–ò–ï</b>‚ùó\n\n–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É —É–¥–∞–ª–µ–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞?',
                                     reply_markup=kb.confirm_order_cancelation(back_opt),
                                     parse_mode='HTML')


# –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫—É—É–º–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É –∫ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –∑–∞–∫–∞–∑–µ
@order_creation.callback_query(F.data.startswith('add_vacc_page_'))
@order_creation.callback_query(F.data == 'add_vacc_to_order')
@order_creation.callback_query(F.data == 'delete_vacc')
async def add_vacc_to_order_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('add_vacc_page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        await state.update_data(from_callback=callback.data)
        page = 1
    data = await state.get_data()
    from_callback = data['from_callback']
    if from_callback == 'add_vacc_to_order':
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –±–µ–∑ –≤–∞–∫—É—É–º–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏
        products = {product:data[product] for product in data.keys() if product.startswith('product_data_')
                    and data[product]['item_vacc'] == False}
        if products: 
            await callback.message.edit_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏</b>',
                                            reply_markup= await kb.choose_product_vacc(products, from_callback, page=page),
                                            parse_mode='HTML')
        else:
            await callback.answer(text='–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏', show_alert=True)
    elif from_callback == 'delete_vacc':
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ —Å –≤–∞–∫—É—É–º–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–æ–π
        products = {product:data[product] for product in data.keys() if product.startswith('product_data_')
                    and data[product]['item_vacc'] == True}
        if products:
            await callback.message.edit_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏</b>',
                                            reply_markup= await kb.choose_product_vacc(products, from_callback, page=page),
                                            parse_mode='HTML')
        else:
            await callback.answer(text='–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤–∞–∫—É—É–º–∞—Ü–∏–µ–π', show_alert=True)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫—É—É–º–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏
@order_creation.callback_query(F.data.startswith('add_vacc_item_'))
@order_creation.callback_query(F.data.startswith('vacc_all'))
async def add_vacc_item_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from_callback = data['from_callback']
    
    # –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    if from_callback == 'add_vacc_to_order':
        flag = True
    elif from_callback == 'delete_vacc':
        flag = False
    
    if callback.data.startswith('add_vacc_item_'): # –µ—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
        product_data_id = int(callback.data.split('_')[-1])
        product = f'product_data_{product_data_id}'
        data[product]['item_vacc'] = flag
    elif callback.data == 'vacc_all': # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å—Ä–∞–∑—É
        product_list = [product for product in data.keys() if product.startswith('product_data_')]
        for product in product_list:
            data[product]['item_vacc'] = flag
            
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å FSM 
    await state.clear()
    await state.update_data(data)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º –≤–∞–∫—É—É–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if from_callback == 'add_vacc_to_order':
        await back_to_order_creation_handler(callback, state)
    elif from_callback == 'delete_vacc':
        await change_order_handler(callback, state)
    

# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –µ–µ —Å–º–µ–Ω—ã
@order_creation.callback_query(F.data.startswith('new_order:change_session_page_'))
@order_creation.callback_query(F.data == 'new_order:change_session')
async def change_session_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_session = data['session_name']
    if callback.data.startswith('new_order:change_session_page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –°–ï–°–°–ò–Æ</b>\n\n' \
                                            f'–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è - <b>{current_session}</b>',
                                     reply_markup=await kb.choose_session(page=page),
                                     parse_mode='HTML')
    

# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
@order_creation.callback_query(F.data == 'new_order:add_delivery')
async def add_delivery_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    issue_method = data['issue_method']
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –ú–ï–¢–û–î –í–´–î–ê–ß–ò</b>\n\n' \
                                            f'–¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ - <b>{issue_method}</b>\n\n',
                                     reply_markup=kb.cancel_delivery_price(issue_method),
                                     parse_mode='HTML')
    

# –í —Å–ª—É—á–∞–µ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ø–∞–¥–∞–µ–º —Å—é–¥–∞
@order_creation.callback_query(F.data == 'new_order:delivery')
async def add_address_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(issue_method='–î–æ—Å—Ç–∞–≤–∫–∞')
    data = await state.get_data()
    issue_place = data['issue_place']
    current_address = ''
    if issue_place:
        current_address = f'–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏ - <b>{issue_place}</b>\n\n'
    
    await callback.message.edit_text(text='‚ùì <b>–í–í–ï–î–ò–¢–ï –ê–î–†–ï–°–° –î–û–°–¢–ê–í–ö–ò</b>\n\n'
                                            f'{current_address}',
                                        reply_markup=kb.cancel_delivery_address,
                                        parse_mode='HTML')
    await state.set_state(Order.issue_place)

    

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
@order_creation.message(Order.issue_place)
async def issue_place_receiver_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    
    issue_datetime = data['issue_datetime']
    current_date = ''
    if issue_datetime:
        day = issue_datetime['day']
        month = issue_datetime['month']
        year = issue_datetime['year']
        current_date = f'–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - <b>{day:02d}-{month:02d}-{year}</b>\n\n.'
    
    await state.set_state(None)
    data = await state.get_data()
    issue_place = message.text
    await state.update_data(issue_place=issue_place)
    
    now = represent_utc_3(datetime.now())
    year = now.year
    month = now.month
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text='‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –î–û–°–¢–ê–í–ö–ò</b>\n\n' \
                                                f'{current_date}' \
                                                '–î–∞—Ç—É –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <i>–î–î-–ú–ú-–ì–ì–ì–ì</i>',
                                        reply_markup=kb.create_calendar_keyboard(year, month, issue_datetime),
                                        parse_mode='HTML')
    await state.set_state(Order.issue_datetime)



# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–¥–∞—á–∏
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
@order_creation.callback_query(F.data == 'new_order:self_pickup')
@order_creation.callback_query(F.data.startswith('new_order:delivery:prev:'))
@order_creation.callback_query(F.data.startswith('new_order:delivery:next:'))
@order_creation.callback_query(F.data == 'new_order:delete_address')
@order_creation.callback_query(F.data == 'new_order:delivery_date')
async def new_session_handler(callback: CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥–æ–º –≤—ã–¥–∞—á–∏ –±—ã–ª —Å–∞–º–æ–≤—ã–≤–æ–∑, —Ç–æ –ê–î–†–ï–°–° –Ω–µ –Ω—É–∂–µ–Ω
    issue_opt = '–î–û–°–¢–ê–í–ö–ò'
    if callback.data == 'new_order:self_pickup':
        await state.update_data(issue_method='–°–∞–º–æ–≤—ã–≤–æ–∑', issue_place=None)
        issue_opt = '–í–´–î–ê–ß–ò'
    elif callback.data == 'new_order:delete_address':
        await state.update_data(issue_place=None)
        
    data = await state.get_data()
    # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    issue_datetime = data['issue_datetime']
    current_date = ''
    if issue_datetime:
        day_cur = issue_datetime['day']
        month_cur = issue_datetime['month']
        year_cur = issue_datetime['year']
        current_date = f'–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - <b>{day_cur:02d}-{month_cur:02d}-{year_cur}</b>\n\n.'
        
    await state.set_state(None)
    now = represent_utc_3(datetime.now())
    year = now.year
    month = now.month
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
    if callback.data.startswith('new_order:delivery:'):
        calendar_data = callback.data.split(':')
        if calendar_data[2] == 'prev':
            year = int(calendar_data[3])
            month = int(calendar_data[4]) - 1
            if month < 1:
                month = 12
                year -= 1
        elif calendar_data[2] == 'next':
            year = int(calendar_data[3])
            month = int(calendar_data[4]) + 1
            if month > 12:
                month = 1
                year += 1
        await callback.message.edit_reply_markup(reply_markup=kb.create_calendar_keyboard(year, month, issue_datetime))
    else:
        await callback.message.edit_text(text=f'‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ {issue_opt}</b>\n\n' \
                                                f'{current_date}' \
                                                '–î–∞—Ç—É –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <i>–î–î-–ú–ú-–ì–ì–ì–ì</i>',
                                        reply_markup=kb.create_calendar_keyboard(year, month, issue_datetime),
                                        parse_mode='HTML')
    await state.set_state(Order.issue_datetime)

    
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
@order_creation.callback_query(F.data == 'new_order:skip_date')
@order_creation.callback_query(F.data.startswith('new_order:delivery:date:'))
async def issue_datetime_handler(callback: CallbackQuery, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    issue_method = data['issue_method']
    issue_opt = '–î–û–°–¢–ê–í–ö–ò'
    if issue_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        issue_opt = '–í–´–î–ê–ß–ò'
    
    issue_datetime = data['issue_datetime']
    current_time = ''
    if issue_datetime:
        if 'hour' in issue_datetime.keys():
            hour = issue_datetime['hour']
            minute = issue_datetime['minute']
            current_time = f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - <b>{hour:02d}:{minute:02d}</b>\n\n.'
        
    if callback.data != 'new_order:skip_date':
        date_comp = [int(_) for _ in callback.data.split(':')[-3:]]
        issue_datetime = {
            'year': date_comp[0],
            'month': date_comp[1],
            'day': date_comp[2]
        }
        await state.update_data(issue_datetime=issue_datetime)
    
    await callback.message.edit_text(text=f'‚ùì‚åöÔ∏è <b>–£–ö–ê–ñ–ò–¢–ï –í–†–ï–ú–Ø {issue_opt}</b>\n\n' \
                                            f'{current_time}' \
                                            '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: <i>–ù–∞–ø—Ä–∏–º–µ—Ä 13:30 –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ 1330 –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ " : ". '\
                                            '–í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –æ–¥–Ω–∏–º –∑–∞–∫–æ–º —Å—Ç–æ—è–ª 0 –≤ –Ω–∞—á–∞–ª–µ - 08:05 –∏–ª–∏ 0805.</i>',
                                    reply_markup=kb.cancel_delivery_time,
                                    parse_mode='HTML')
    await state.set_state(Order.issue_time)
    

# –£–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã
@order_creation.message(Order.issue_datetime)
async def issue_datetime_receiver_handler(message: Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    issue_method = data['issue_method']
    issue_opt = '–î–û–°–¢–ê–í–ö–ò'
    if issue_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        issue_opt = '–í–´–î–ê–ß–ò'
    
    issue_datetime = data['issue_datetime']
    current_date = ''
    if issue_datetime:
        day = issue_datetime['day']
        month = issue_datetime['month']
        year = issue_datetime['year']
        current_date = f'–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - <b>{day:02d}-{month:02d}-{year}</b>\n\n.'
        if 'hour' in issue_datetime.keys():
            hour = issue_datetime['hour']
            minute = issue_datetime['minute']
            current_time = f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - <b>{hour:02d}:{minute:02d}</b>\n\n.'
            
    try:
        date_comp = [int(_) for _ in message.text.split('-')]
        if len(date_comp) != 3 or len(str(date_comp[2])) != 4:
            raise ValueError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        issue_datetime = {
            'year': date_comp[2],
            'month': date_comp[1],
            'day': date_comp[0]
        }
        datetime(**issue_datetime)
        await state.update_data(issue_datetime=issue_datetime)
        await message.bot.edit_message_text(chat_id=data['chat_id'],
                                            message_id=data['message_id'],
                                            text=f'‚ùì‚åöÔ∏è <b>–£–ö–ê–ñ–ò–¢–ï –í–†–ï–ú–Ø {issue_opt}</b>\n\n' \
                                                f'{current_time}' \
                                                '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: <i>–ù–∞–ø—Ä–∏–º–µ—Ä 13:30 –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ 1330 –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ " : ". '\
                                                '–í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –æ–¥–Ω–∏–º –∑–∞–∫–æ–º —Å—Ç–æ—è–ª 0 –≤ –Ω–∞—á–∞–ª–µ - 08:05 –∏–ª–∏ 0805.</i>',
                                            reply_markup=kb.cancel_delivery_time,
                                            parse_mode='HTML')
        await state.set_state(Order.issue_time)
    except:
        try:
            await state.set_state(Order.issue_datetime)
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–û –£–ö–ê–ó–ê–ù–ê –î–ê–¢–ê</b>\n\n' \
                                                    f'‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ {issue_opt}</b>\n\n' \
                                                    f'{current_date}' \
                                                    '–î–∞—Ç—É –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n<i>–î–î-–ú–ú-–ì–ì–ì–ì</i>',
                                                reply_markup=kb.cancel_delivery_time,
                                                parse_mode='HTML')
            return None
        except TelegramBadRequest:
            return None



# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
@order_creation.message(Order.issue_time)
async def issue_time_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    issue_method = data['issue_method']
    issue_opt = '–î–û–°–¢–ê–í–ö–ò'
    if issue_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        issue_opt = '–í–´–î–ê–ß–ò'
    
    issue_datetime = data['issue_datetime']
    current_time = ''
    if 'hour' in issue_datetime.keys():
        hour = data['issue_datetime']['hour']
        minute = data['issue_datetime']['minute']
        current_time = f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - <b>{hour:02d}:{minute:02d}</b>\n\n.'
    
    issue_time = message.text.replace(':', '')
    try:
        if len(issue_time) != 4:
            raise(ValueError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'))
        issue_datetime = data['issue_datetime']
        issue_datetime['hour'] = int(issue_time[:2])
        issue_datetime['minute'] = int(issue_time[-2:])
        datetime(**issue_datetime)
        await state.update_data(issue_datetime=issue_datetime)
    except Exception as e:
        try:
            await state.set_state(Order.issue_time)
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–û –£–ö–ê–ó–ê–ù–û –í–†–ï–ú–Ø</b>\n\n' \
                                                    f'‚åöÔ∏è <b>–£–ö–ê–ñ–ò–¢–ï –í–†–ï–ú–Ø {issue_opt}</b>\n\n' \
                                                    f'{current_time}' \
                                                    '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: <i>–ù–∞–ø—Ä–∏–º–µ—Ä 13:30 –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ 1330 –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ " : ". '\
                                                    '–í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –æ–¥–Ω–∏–º –∑–∞–∫–æ–º —Å—Ç–æ—è–ª 0 –≤ –Ω–∞—á–∞–ª–µ - 08:05 –∏–ª–∏ 0805.</i>',
                                                reply_markup=kb.cancel_delivery_time,
                                                parse_mode='HTML')
            return None
        except TelegramBadRequest:
            return None
            
    await state.update_data(issue_datetime=issue_datetime)
    data = await state.get_data()
    text = order_text(data)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=text,
                                        reply_markup=kb.new_order_keyboard,
                                        parse_mode='HTML')







# # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
# # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞—Ç—å —Å–∫–∏–¥–∫—É
# @order_creation.callback_query(F.data == 'add_disc_to_order')
# @order_creation.callback_query(F.data.startswith('add_disc_page_'))
# async def add_disc_to_order_handler(callback: CallbackQuery, state: FSMContext):
#     if callback.data.startswith('add_disc_page_'):
#         page = int(callback.data.split('_')[-1])
#     else:
#         page = 1
#     data = await state.get_data()
#     # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
#     products = {product:data[product] for product in data.keys() if product.startswith('product_data_')}
#     await callback.message.edit_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç —É–∫–∞–∑–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏</b>',
#                                      reply_markup= await kb.choose_add_disc(products, page=page),
#                                      parse_mode='HTML')
    

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏
# @order_creation.callback_query(F.data.startswith('add_disc_item_'))
@order_creation.callback_query(F.data == 'disc_all')
async def add_disc_item_handler(callback: CallbackQuery, state: FSMContext):
    from_callback = callback.data
    await state.update_data(from_callback=from_callback)
    
    # # –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞–º –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–æ–π
    # if from_callback != 'disc_all':
    #     product_data_id = int(callback.data.split('_')[-1])
    #     current_product = f'product_data_{product_data_id}'
    #     await state.update_data(current_product=current_product)
        
    await callback.message.edit_text(text='<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ 100</b>',
                                    reply_markup=kb.back_to_order_changing,
                                    parse_mode='HTML')
    await state.set_state(Product.disc)


# –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑
# (–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
@order_creation.message(Product.disc)
async def save_disc_item_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    
    try:
        disc = int(message.text)
        if not 0 <= disc <= 100:
            raise
    except:
        try:
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>‚ùó\n\n' \
                                                    '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 0 –¥–æ 100: <i>123.45</i>\n\n' \
                                                    f'<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö</b>',
                                                parse_mode='HTML',
                                                reply_markup=kb.back_to_order_creation)
            return None
        except TelegramBadRequest:
            return None
        
    await state.set_state(None)

    if data['from_callback'] != 'disc_all': # –µ—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
        current_product = data['current_product']
        data[current_product]['item_disc'] = disc
    else: # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å—Ä–∞–∑—É
        product_list = [product for product in data.keys() if product.startswith('product_data_')]
        for product in product_list:
            data[product]['item_disc'] = disc
            data['order_disc'] = disc
    

    await state.clear()
    await state.update_data(data)
        
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    text = order_text(data)
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=text,
                                        reply_markup=kb.new_order_keyboard,
                                        parse_mode='HTML')
    
    
