from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from calendar import monthrange
from datetime import date

from app.database.requests import get_products, get_sessions, get_orders




def client_phone_cancelation(back_opt):
    client_phone_cancelation = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'new_order:skip_phone'),
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{back_opt}')]
    ])
    return client_phone_cancelation

def client_name_cancelation(back_opt):
    client_name_cancelation = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{back_opt}')]
    ])
    return client_name_cancelation


# –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
new_order_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÄ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='new_order:add_product')],
    [InlineKeyboardButton(text='üì§ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫—É—É–º–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É', callback_data='add_vacc_to_order')],
    [InlineKeyboardButton(text='üõç –í—ã–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞', callback_data='new_order:add_delivery')],
    [InlineKeyboardButton(text='‚úç –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='new_order:change_order')],
    [InlineKeyboardButton(text='‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='save_order')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', callback_data=f'confirm_order_cancelation')]
])


# –æ—Ç–º–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
def cancel_delivery_price(issue_method):
    method_button = InlineKeyboardButton(text='üõç –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='new_order:self_pickup')
    skip_button = InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='new_order:delivery')
    
    if issue_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        method_button = InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='new_order:delivery')
        skip_button = InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='new_order:self_pickup')
        
    cancel_delivery_price = InlineKeyboardMarkup(inline_keyboard=[
        [method_button],
        [skip_button,
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:menu')]
    ])
                                                 
    return cancel_delivery_price


# –æ—Ç–º–µ–Ω–∞ –∞–¥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
cancel_delivery_address = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –∞–¥—Ä–µ—Å—Å', callback_data='new_order:delete_address')],
    [InlineKeyboardButton(text='üìÖ –ö –¥–∞—Ç–µ', callback_data='new_order:delivery_date'),
    InlineKeyboardButton(text='üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='new_order:menu')]
])


# –æ—Ç–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
cancel_delivery_time = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º—è', callback_data='new_order:delete_time'),
    InlineKeyboardButton(text='üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='new_order:menu')]
])


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def create_calendar_keyboard(year: int, month: int, issue_datetime: dict) -> InlineKeyboardMarkup:
    """
    Creates an inline keyboard representing a calendar for the given year and month.
    """
    keyboard = []
    months = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"}
    keyboard.append([InlineKeyboardButton(text=f'{year} {months[month]}', callback_data="ignore")])
    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in days_of_week])

    first_day = date(year, month, 1)
    first_day_weekday = first_day.weekday()  # Monday is 0, Sunday is 6
    days_in_month = monthrange(year, month)[1]
    day_counter = 1

    for week in range(6):  # Up to 6 weeks can be displayed
        row = []
        for day_of_week in range(7):
            if week == 0 and day_of_week < first_day_weekday:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            elif day_counter > days_in_month:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                day_text = str(day_counter)
                callback_data = f"new_order:delivery:date:{year}:{month}:{day_counter}"
                row.append(InlineKeyboardButton(text=day_text, callback_data=callback_data))
                day_counter += 1
        keyboard.append(row)
        if day_counter > days_in_month:
            break
    
    additional_buttons = [
        InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç—É', callback_data='new_order:delete_date')
    ]
    if issue_datetime:
        additional_buttons.append(InlineKeyboardButton(text='‚åöÔ∏è –ö –≤—Ä–µ–º–µ–Ω–∏', callback_data='new_order:skip_date'))
    
    
    keyboard.append(additional_buttons)

    navigation_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –†–∞–Ω–µ–µ", callback_data=f"new_order:delivery:prev:{year}:{month}"),
        InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="new_order:menu"),
        InlineKeyboardButton(text="‚û°Ô∏è –ü–æ–∑–¥–Ω–µ–µ", callback_data=f"new_order:delivery:next:{year}:{month}"),
    ]
    keyboard.append(navigation_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
async def choose_product(page: int = 1, products_per_page: int = 8):
    products = await get_products()
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products = products[start:end]
    
    for product in current_products:
        text = f"{product.product_name} - {product.product_price} —Ä/{product.product_unit}"
        callback_data = f"product_id_{product.product_id}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:menu'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"product_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# 
change_order_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='new_order:change_name')],
    [InlineKeyboardButton(text='‚òéÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞', callback_data='new_order:change_phone')],
    [InlineKeyboardButton(text='‚öñÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞', callback_data='change_product')],
    [InlineKeyboardButton(text='üì§ –£–¥–∞–ª–∏—Ç—å –≤–∞–∫—É—É–º–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É', callback_data='delete_vacc')],
    [InlineKeyboardButton(text='üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', callback_data='add_note')],
    [InlineKeyboardButton(text='üìâ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', callback_data='disc_all')],
    [InlineKeyboardButton(text='üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é', callback_data='new_order:change_session')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='new_order:menu')]
])


# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
async def change_product_keyboard(products: dict, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['product_unit']
        if product_unit == '–∫–≥':
            product_unit == '–≥'
        
        text = f"{product_data['product_name']} - {product_data['product_qty']} {product_unit}"
        callback_data = product
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_data_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:change_order'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"product_data_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()

order_confirmation = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_order_creation'),
     InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='new_order:menu')]
])

back_to_order_changing = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='new_order:change_order')]])

back_to_order_creation = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='new_order:menu')]])

def confirm_order_cancelation(back_opt):
    confirm_order_cancelation = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É', callback_data=f'{back_opt}'),
        InlineKeyboardButton(text='üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É', callback_data='new_order:menu')]
    ])
    return confirm_order_cancelation

note_removal = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:change_order'),
     InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='note_removal')]
])


# –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏
async def choose_product_vacc(products: dict, from_callback: str, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['product_unit']
        if product_unit == '–∫–≥':
            product_unit == '–≥'
        
        text = f"{product_data['product_name']} - {product_data['product_qty']} {product_unit}"
        callback_data = f"add_vacc_item_{product.split('_')[-1]}"
        
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    else:
        if from_callback == 'add_vacc_to_order':
            text = 'üß® –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='vacc_all'))
        elif from_callback == 'delete_vacc':
            text = 'üß® –£–¥–∞–ª–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='vacc_all'))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_vacc_page_{page - 1}")
        )
    
    if from_callback == 'add_vacc_to_order':
        navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:menu'))
    elif from_callback == 'delete_vacc':
        navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:change_order'))
    

    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"add_vacc_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã-—Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def choose_session(page: int = 1, sessions_per_page: int = 8):
    sessions = await get_sessions()
    sessions = [session for session in sessions if not session.session_arch]
    session_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * sessions_per_page
    end = start + sessions_per_page
    current_sessions = sessions[start:end]
    
    for session in current_sessions:
        orders = await get_orders(session_id=session.session_id)
        orders_number = len([order for order in orders if not order.order_completed])
        text = f"{session.session_name} ({orders_number})"
        callback_data = f"new_order:change_session_id_{session.session_id}"
        session_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        
    session_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"new_order:change_session_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:menu'))
    
    if end < len(sessions):
        navigation_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"new_order:change_session_page_{page + 1}")
        )
        
    if navigation_buttons:
        session_keyboard.row(*navigation_buttons)

    return session_keyboard.as_markup()












# # –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
# async def choose_add_disc(products: dict, page: int = 1, products_per_page: int = 8):
#     product_keyboard = InlineKeyboardBuilder()
    
#     start = (page - 1) * products_per_page
#     end = start + products_per_page
#     current_products_list = list(products.keys())[start:end]
#     current_products = {product:products[product] for product in current_products_list}
    
#     for product, product_data in current_products.items():
#         product_unit = product_data['product_unit']
#         if product_unit == '–∫–≥':
#             product_unit == '–≥'
        
#         text = f"{product_data['product_name']} - {product_data['product_qty']} {product_unit} - {product_data['item_disc']}%"
#         callback_data = f"add_disc_item_{product.split('_')[-1]}"
#         product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
#     else:
#         text = 'üß® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üß®'
#         product_keyboard.add(InlineKeyboardButton(text=text, callback_data='disc_all'))
    
#     product_keyboard.adjust(1)
    
#     navigation_buttons = []
    
#     if page > 1:
#         navigation_buttons.append(
#             InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_disc_page_{page - 1}")
#         )
    
#     navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='new_order:change_order'))
    
#     if end < len(products):
#         navigation_buttons.append(
#             InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"add_disc_page_{page + 1}")
#         )
        
#     if navigation_buttons:
#         product_keyboard.row(*navigation_buttons)

#     return product_keyboard.as_markup()