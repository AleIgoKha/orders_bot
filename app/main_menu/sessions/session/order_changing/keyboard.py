from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests import get_sessions, get_products


session_cancellation = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='sessions:choose_session')]
])

issuing_method = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='ü§ù –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='–°–∞–º–æ–≤—ã–≤–æ–∑')],
    [InlineKeyboardButton(text='üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É', callback_data='–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É')],
    [InlineKeyboardButton(text='üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π', callback_data='–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='sessions:choose_session')]
])

session_confirmation = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='session_confirmation')],
    [InlineKeyboardButton(text='‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å', callback_data='new_session')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏', callback_data='sessions:choose_session')]
])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã-—Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def choose_session(page: int = 1, sessions_per_page: int = 8):
    sessions = await get_sessions()
    session_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * sessions_per_page
    end = start + sessions_per_page
    current_sessions = sessions[start:end]
    
    for session in current_sessions:
        text = f"{session.session_date.strftime('%d-%m-%Y')} - {session.session_place} - {session.session_method}"
        callback_data = f"session_id_{session.session_id}"
        session_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    session_keyboard.add(InlineKeyboardButton(text='‚ûï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', callback_data='new_session'))
    
    session_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ", callback_data=f"session_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='main:menu'))
    
    if end < len(sessions):
        navigation_buttons.append(
            InlineKeyboardButton(text="–ë–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ ‚û°Ô∏è", callback_data=f"session_page_{page + 1}")
        )
        
    if navigation_buttons:
        session_keyboard.row(*navigation_buttons)

    return session_keyboard.as_markup()



session_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='order_creation')],
    [InlineKeyboardButton(text='‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤', callback_data='order_processing')],
    [InlineKeyboardButton(text='‚òëÔ∏è –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='completed_orders')],
    [InlineKeyboardButton(text='üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏', callback_data='stats_orders_menu')],
    [InlineKeyboardButton(text='‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏', callback_data='session_downloads')],
    [InlineKeyboardButton(text='‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏', callback_data='main:menu')]
])





back_to_change_order_data = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])

back_to_change_item_data = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
change_order_data_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÄ –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö', callback_data='change_item_data')],
    [InlineKeyboardButton(text='üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='change_client_name')],
    [InlineKeyboardButton(text='üìâ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏', callback_data='change_order_disc')],
    [InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='change_note')],
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='delete_order')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_process_order_menu')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
change_completed_order_data_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö', callback_data='change_item_data')],
    [InlineKeyboardButton(text='üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='change_client_name')],
    [InlineKeyboardButton(text='üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏', callback_data='change_order_disc')],
    [InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='change_note')],
    [InlineKeyboardButton(text='‚òë –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', callback_data='change_status')],
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='delete_order')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='completed_orders')]
])

# –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
change_item_data = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÄ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑', callback_data='add_new_item')],
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞', callback_data='delete_item')],
    [InlineKeyboardButton(text='üì§ –£–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –≤–∞–∫. —É–ø.', callback_data='change_add_item_vacc')],
    [InlineKeyboardButton(text='üì• –£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –≤–∞–∫. —É–ø.', callback_data='change_delete_item_vacc')],
    [InlineKeyboardButton(text='üìã –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', callback_data='change_item_qty')],
    [InlineKeyboardButton(text='‚öñ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', callback_data='change_item_qty_fact')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='change_order_data')]
])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞
def choose_change_item_qty(items_data_list: list, page: int = 1, items_per_page: int = 8):
    item_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * items_per_page
    end = start + items_per_page
    current_items = items_data_list[start:end]
    
    for item in current_items:
        item_unit = item['item_unit']
        item_qty = item['item_qty']
        item_qty_fact = item['item_qty_fact']
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–∞–º–º—ã
        if item_unit == '–∫–≥':
            item_qty = item_qty * 1000
            item_qty_fact = item_qty_fact * 1000
            item_unit = item_unit[-1]
            
        text = f"{item['item_name']} - " \
                f"–ó–∞–∫–∞–∑–∞–Ω–æ: {int(item_qty)} {item_unit} - " \
                f"–í–∑–≤–µ—à–µ–Ω–æ: {int(item_qty_fact)} {item_unit}"
        callback_data = f"change_item_qty_{item['item_id']}"
        item_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    item_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"change_item_qty_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'change_item_data'))
    
    if end < len(items_data_list):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"change_item_qty_page_{page + 1}")
        )
        
    if navigation_buttons:
        item_keyboard.row(*navigation_buttons)

    return item_keyboard.as_markup()


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
async def choose_add_item(page: int = 1, products_per_page: int = 8):
    products = await get_products()
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products = products[start:end]
    
    for product in current_products:
        text = f"{product.product_name} - {product.product_price} —Ä/{product.product_unit}"
        callback_data = f"add_item_id_{product.product_id}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_item_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"add_item_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
confirm_delete_item = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='confirm_delete_item')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data')]
])

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
confirm_delete_order = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='confirm_delete_order')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])

# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
confirm_change_status = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚òë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_change_status')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])


confirm_change_note = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data'),
     InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='note_removal_from_order')]
])\
    

# –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏
async def choose_change_product_vacc(products: dict, from_callback: str, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['item_unit']
        item_qty = product_data['item_qty']
        item_qty_fact = product_data['item_qty_fact']
        if product_unit == '–∫–≥':
            product_unit = product_unit[-1]
            item_qty = item_qty * 1000
            item_qty_fact = item_qty_fact * 1000
        
        text = f"{product_data['item_name']} - –ó–∞–∫–∞–∑–∞–Ω–æ: {int(item_qty)} {product_unit} - –í–∑–≤–µ—à–µ–Ω–æ: {int(item_qty_fact)} {product_unit}"
        callback_data = f"change_vacc_item_{product.split('_')[-1]}"
        
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    else:
        if from_callback == 'change_add_item_vacc':
            text = 'üß® –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='change_vacc_all'))
        elif from_callback == 'change_delete_item_vacc':
            text = 'üß® –£–¥–∞–ª–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='change_vacc_all'))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"change_vacc_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data'))

    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"change_vacc_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


