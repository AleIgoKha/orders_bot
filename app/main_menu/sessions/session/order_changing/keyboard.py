from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests import get_sessions, get_products, get_orders
from calendar import monthrange
from datetime import date



back_to_change_order_data = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])

back_to_change_item_data = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
def change_order_menu(from_menu, order_id):
    part_1 = [
    [InlineKeyboardButton(text='üßÄ –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö', callback_data='change_item_data')],
    [InlineKeyboardButton(text='üõç –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–¥–∞—á–∏', callback_data='change_order:issue_menu')],
    [InlineKeyboardButton(text='üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='change_order_name')],
    [InlineKeyboardButton(text='‚òéÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞', callback_data='change_order_phone')],
    [InlineKeyboardButton(text='üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–∫–∞–∑–∞', callback_data='change_order:change_session')],
    [InlineKeyboardButton(text='ü§ë –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏', callback_data='change_order_disc')],
    [InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='change_note')]
    ]
    
    if from_menu == 'completed_orders':
        part_1.append([InlineKeyboardButton(text='‚òë –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', callback_data='change_status')])
    
    part_2 = [
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='delete_order')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'{from_menu}:order_id_{order_id}')]
    ]
    
    inline_keyboard = part_1 + part_2
    
    change_order_menu = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    return change_order_menu


# –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
change_item_data = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÄ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑', callback_data='add_new_item')],
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞', callback_data='delete_item')],
    [InlineKeyboardButton(text='üì§ –£–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –≤–∞–∫. —É–ø.', callback_data='change_add_item_vacc')],
    [InlineKeyboardButton(text='üì• –£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –≤–∞–∫. —É–ø.', callback_data='change_delete_item_vacc')],
    [InlineKeyboardButton(text='üìã –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', callback_data='change_item_qty')],
    [InlineKeyboardButton(text='‚öñ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', callback_data='change_item_qty_fact')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='change_order_data')]
])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞
def choose_change_item_qty(items_data_list: list, page: int = 1, items_per_page: int = 8):
    item_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * items_per_page
    end = start + items_per_page
    current_items = items_data_list[start:end]
    
    for item in current_items:
        item_unit = item['item_unit']
        item_qty = item['item_qty']
        item_qty_fact = item['item_qty_fact']
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–∞–º–º—ã
        if item_unit == '–∫–≥':
            item_qty = item_qty * 1000
            item_qty_fact = item_qty_fact * 1000
            item_unit = item_unit[-1]
            
        text = f"{item['item_name']} - " \
                f"–ó–∞–∫–∞–∑–∞–Ω–æ: {int(item_qty)} {item_unit} - " \
                f"–í–∑–≤–µ—à–µ–Ω–æ: {int(item_qty_fact)} {item_unit}"
        callback_data = f"change_item_qty_{item['item_id']}"
        item_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    item_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"change_item_qty_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'change_item_data'))
    
    if end < len(items_data_list):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"change_item_qty_page_{page + 1}")
        )
        
    if navigation_buttons:
        item_keyboard.row(*navigation_buttons)

    return item_keyboard.as_markup()


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
async def choose_add_item(page: int = 1, products_per_page: int = 8):
    products = await get_products()
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products = products[start:end]
    
    for product in current_products:
        text = f"{product.product_name} - {product.product_price} —Ä/{product.product_unit}"
        callback_data = f"add_item_id_{product.product_id}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_item_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data'))
    
    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"add_item_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
confirm_delete_item = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='confirm_delete_item')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data')]
])

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
confirm_delete_order = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='confirm_delete_order')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])

# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
confirm_change_status = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚òë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_change_status')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])


confirm_change_note = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data'),
     InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='note_removal_from_order')]
])\
    

# –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–∫—É—É–º–∞—Ü–∏–∏
async def choose_change_product_vacc(products: dict, from_callback: str, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_products_list = list(products.keys())[start:end]
    current_products = {product:products[product] for product in current_products_list}
    
    for product, product_data in current_products.items():
        product_unit = product_data['item_unit']
        item_qty = product_data['item_qty']
        item_qty_fact = product_data['item_qty_fact']
        if product_unit == '–∫–≥':
            product_unit = product_unit[-1]
            item_qty = item_qty * 1000
            item_qty_fact = item_qty_fact * 1000
        
        text = f"{product_data['item_name']} - –ó–∞–∫–∞–∑–∞–Ω–æ: {int(item_qty)} {product_unit} - –í–∑–≤–µ—à–µ–Ω–æ: {int(item_qty_fact)} {product_unit}"
        callback_data = f"change_vacc_item_{product.split('_')[-1]}"
        
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    else:
        if from_callback == 'change_add_item_vacc':
            text = 'üß® –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='change_vacc_all'))
        elif from_callback == 'change_delete_item_vacc':
            text = 'üß® –£–¥–∞–ª–∏—Ç—å –≤—Å–µ–º –ø—Ä–æ–¥—É–∫–∞–º üß®'
            product_keyboard.add(InlineKeyboardButton(text=text, callback_data='change_vacc_all'))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"change_vacc_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_item_data'))

    if end < len(products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"change_vacc_page_{page + 1}")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –∏–∑–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
change_phone = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='change_order:delete_phone'),
    InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])


# –∏–∑–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
change_session = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data')]
])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã-—Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def choose_session(page: int = 1, sessions_per_page: int = 8):
    sessions = await get_sessions()
    sessions = [session for session in sessions if not session.session_arch]
    session_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * sessions_per_page
    end = start + sessions_per_page
    current_sessions = sessions[start:end]
    
    for session in current_sessions:
        orders = await get_orders(session_id=session.session_id)
        orders_number = len([order for order in orders if not order[0].order_completed])
        text = f"{session.session_name} ({orders_number})"
        callback_data = f"change_order:change_session_id_{session.session_id}"
        session_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        
    session_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"change_order:change_session_page_{page - 1}")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order_data'))
    
    if end < len(sessions):
        navigation_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"change_order:change_session_page_{page + 1}")
        )
        
    if navigation_buttons:
        session_keyboard.row(*navigation_buttons)

    return session_keyboard.as_markup()


# –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
def issue_menu(issue_method, issue_datetime):
    inline_keyboard = [
        [InlineKeyboardButton(text='üöö –ú–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏', callback_data='change_order:issue_method')]
    ]
    
    if issue_method != '–°–∞–º–æ–≤—ã–≤–æ–∑':
         inline_keyboard += [
            [InlineKeyboardButton(text='üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–¥–∞—á–∏', callback_data='change_order:delivery_price')],
            [InlineKeyboardButton(text='üìç –ê–¥—Ä–µ—Å –≤—ã–¥–∞—á–∏', callback_data='change_order:issue_place')]
        ]
    
    inline_keyboard += [[InlineKeyboardButton(text='üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏', callback_data='change_order:issue_date')]]
    
    if issue_datetime:
        inline_keyboard += [[InlineKeyboardButton(text='‚åöÔ∏è –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏', callback_data='change_order:issue_time')]]
        
    inline_keyboard += [[InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='change_order_data')]]
    
    issue_menu = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    
    return issue_menu


# –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–æ –≤—ã–¥–∞—á–∏
def issue_method_kb(issue_method):
    method_button = InlineKeyboardButton(text='üõç –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='change_order:self_pickup')
    
    if issue_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        method_button = InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='change_order:delivery')
        
    issue_method_kb = InlineKeyboardMarkup(inline_keyboard=[
        [method_button,
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order:issue_menu')]
    ])
    
    return issue_method_kb


# –æ—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
# –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ–Ω—é –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
def cancel_delivery_price(from_menu):
    inline_keyboard = []
    
    if from_menu != 'completed_orders':
        inline_keyboard.append(InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', callback_data='change_order:delete_delivery_price'))
    
    inline_keyboard.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order:issue_menu'))
        
    cancel_delivery_price = InlineKeyboardMarkup(inline_keyboard=[inline_keyboard])
    
    return cancel_delivery_price


# –æ—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å—Å–∞
cancel_delivery_address = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å—Å', callback_data='change_order:delete_address'),
    InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order:issue_menu')]
])


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def create_calendar_keyboard(year: int, month: int) -> InlineKeyboardMarkup:
    """
    Creates an inline keyboard representing a calendar for the given year and month.
    """
    keyboard = []
    months = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"}
    keyboard.append([InlineKeyboardButton(text=f'{year} {months[month]}', callback_data="ignore")])
    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in days_of_week])

    first_day = date(year, month, 1)
    first_day_weekday = first_day.weekday()  # Monday is 0, Sunday is 6
    days_in_month = monthrange(year, month)[1]
    day_counter = 1

    for week in range(6):  # Up to 6 weeks can be displayed
        row = []
        for day_of_week in range(7):
            if week == 0 and day_of_week < first_day_weekday:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            elif day_counter > days_in_month:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                day_text = str(day_counter)
                callback_data = f"change_order:delivery:date:{year}:{month}:{day_counter}"
                row.append(InlineKeyboardButton(text=day_text, callback_data=callback_data))
                day_counter += 1
        keyboard.append(row)
        if day_counter > days_in_month:
            break
    
    additional_buttons = [
        InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç—É', callback_data='change_order:delete_date')
    ]
    
    keyboard.append(additional_buttons)

    navigation_buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –†–∞–Ω–µ–µ", callback_data=f"change_order:delivery:prev:{year}:{month}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="change_order:issue_menu"),
        InlineKeyboardButton(text="‚û°Ô∏è –ü–æ–∑–¥–Ω–µ–µ", callback_data=f"change_order:delivery:next:{year}:{month}"),
    ]
    keyboard.append(navigation_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –æ—Ç–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
cancel_delivery_time = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º—è', callback_data='change_order:delete_time'),
    InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='change_order:issue_menu')]
])