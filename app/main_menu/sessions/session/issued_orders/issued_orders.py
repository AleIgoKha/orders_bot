from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

import app.main_menu.sessions.session.issued_orders.keyboard as kb
from app.main_menu.sessions.session.session_menu import back_to_session_menu_handler
from app.database.requests import get_order_items, change_order_data, get_orders_sorted
from app.com_func import group_orders_items, order_text


issued_orders = Router()


# –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –≤–∏–¥–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@issued_orders.callback_query(F.data.startswith('issued_orders:sorting:'))
@issued_orders.callback_query(F.data.startswith('issued_orders:page_'))
@issued_orders.callback_query(F.data == 'session:issued_orders')
@issued_orders.callback_query(F.data == 'issued_orders:back')
async def issued_orders_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('issued_orders:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–∞–∑–ª–∏—á–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    if callback.data == 'session:issued_orders':
        await state.update_data(callback_name=callback.data,
                                desc=True)
    
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if callback.data.startswith('issued_orders:sorting:'):
        if callback.data.split(':')[-1] == 'asc':
            desc = False
        else:
            desc = True
        await state.update_data(desc=desc)
    
    data = await state.get_data()
    session_id = data['session_id']
    desc = data['desc']
    orders = await get_orders_sorted(session_id=session_id)
    
    # –µ—Å–ª–∏ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∞–ª–µ—Ä—Ç
    orders = [order for order in orders if order.order_issued == True]   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if not orders:
        await callback.answer(text='–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', show_alert=True)
        # –ï—Å–ª–∏ –∑–∞—à–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ callback completed_orders, –∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
        if callback.data != 'session:issued_orders':
            return await back_to_session_menu_handler(callback, state)
        return None # —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
        
    await callback.message.edit_text(text='üëåüèΩ <b>–í–´–î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–´</b>',
                                     reply_markup=kb.choose_order(orders=orders, desc=desc, page=page),
                                     parse_mode='HTML')
    

# –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@issued_orders.callback_query(F.data.startswith('issued_orders:order_id_'))
async def issued_order_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('issued_orders:order_id_'):
        order_id = int(callback.data.split('_')[-1])
        await state.update_data(order_id=order_id)
    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_items = await get_order_items(order_id)
    order_items_data = group_orders_items(order_items)[0]
    
    # –í—ã–≤–æ–¥–∏–º –æ–¥–∏–Ω –∑–∞–∫–∞–∑
    text = order_text(order_items_data)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.issued_order,
                                     parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
@issued_orders.callback_query(F.data == 'issued_orders:change_status')
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data['order_id']
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –°–¢–ê–¢–£–°</b>',
                                     reply_markup=kb.change_status(order_id),
                                     parse_mode='HTML')
    
    
# –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
@issued_orders.callback_query(F.data == 'issued_orders:mark_completed')
@issued_orders.callback_query(F.data == 'issued_orders:mark_processing')
async def change_status_receiver_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data['order_id']
    if callback.data.endswith("completed"):
        order_data = {
            'order_issued': False,
            'order_completed': True,
            'finished_datetime': None
        }
        text = "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ì–æ—Ç–æ–≤—ã–µ"
    elif callback.data.endswith("processing"):
        order_data = {
            'order_issued': False,
            'order_completed': False,
            'finished_datetime': None
        }
        text = "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –û–±—Ä–∞–±–æ—Ç–∫—É"
    await change_order_data(order_id=order_id, order_data=order_data)
    await issued_orders_handler(callback, state)
    await callback.answer(text=text)