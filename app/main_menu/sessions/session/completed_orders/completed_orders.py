from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
from pytz import timezone

import app.main_menu.sessions.session.completed_orders.keyboard as kb
from app.database.requests import change_order_data, get_orders_sorted, get_order_items, get_orders
from app.main_menu.sessions.session.session_menu import back_to_session_menu_handler
from app.com_func import group_orders_items
from app.states import Order

completed_orders = Router()

def order_message(order_items_data):
    text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!‚úã\n–≠—Ç–æ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –°—ã—Ä–∞ –ò–≥–æ—Ä—è –•–∞—Ä—á–µ–Ω–∫–æ. ' \
            f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ <b>‚Ññ{order_items_data['order_number']}</b> —Å–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.\n\n' \
            f'üßÄ–í–∞—à –∑–∞–∫–∞–∑:\n'
    
    items_list = [item for item in order_items_data.keys() if item.startswith('item_')]
    total_price = 0
    
    if items_list: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç –ª–∏ –∑–∞–∫–∞–∑
        for item in items_list:
            item_name = order_items_data[item]['item_name']
            item_price = float(order_items_data[item]['item_price'])
            item_qty = float(order_items_data[item]['item_qty'])
            item_unit = order_items_data[item]['item_unit']
            item_qty_fact = float(order_items_data[item]['item_qty_fact'])
            item_vacc = order_items_data[item]['item_vacc']
                    
            
            if item_vacc:
                item_vacc = ' (–≤–∞–∫. —É–ø.)'
                if item_qty_fact < 200:
                    vacc_price = 5
                elif 200 <= item_qty_fact < 300:
                    vacc_price = 6
                elif 300 <= item_qty_fact:
                    vacc_price = (item_qty_fact * 2) / 100
            else:
                item_vacc = ''
                vacc_price = 0
                
            text += f'{item_name}{item_vacc}'
            item_price = round(item_qty_fact * item_price + vacc_price)
            if item_unit == '–∫–≥': # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏–ª–æ–≥—Ä–∞–º—ã –≤ –≥—Ä–∞–º–º—ã
                text += f' - {int(item_qty_fact * 1000)} {item_unit[-1]}\n'
            else:
                text += f' - {int(item_qty_fact)} {item_unit}\n'
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–∫–ª—é—á–∞—è –≤–∞–∫—É—É–º
            
            total_price += round(item_price)
    
    delivery_price = order_items_data['delivery_price']
    
    if order_items_data['issue_method'] != '–°–∞–º–æ–≤—ã–≤–æ–∑':
        if delivery_price == 0:
            text += '\n<b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</b>\n'
        else:
            text += f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ - <b>{round(delivery_price)} —Ä—É–±.</b>\n'
    else:
        delivery_price = 0
    

    
    order_disc = order_items_data['order_disc']
    if order_disc > 0:
        text += f'\n–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ <b>{order_disc}%</b>\n'
    
    text += f'\n–ö –æ–ø–ª–∞—Ç–µ - <b>{round(total_price * ((100 - order_disc) / 100) + int(delivery_price))} —Ä—É–±.</b>\n\n' \
            '–î–æ –≤—Å—Ç—Ä–µ—á–∏!'
    
    return text


# –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
@completed_orders.callback_query(F.data.startswith('completed_orders:sorting:'))
@completed_orders.callback_query(F.data.startswith('completed_orders:page_'))
@completed_orders.callback_query(F.data == 'session:completed_orders')
@completed_orders.callback_query(F.data == 'completed_orders:back')
async def completed_orders_list_handler(callback: CallbackQuery, state: FSMContext):
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–∞–∑–ª–∏—á–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    if callback.data == 'session:completed_orders':
        await state.update_data(from_menu='completed_orders',
                                callback_name=callback.data,  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –∫–æ–ª–±–µ–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                                desc=False)
        
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if callback.data.startswith('completed_orders:sorting:'):
        if callback.data.split(':')[-1] == 'asc':
            desc = False
        else:
            desc = True
        await state.update_data(desc=desc)
        
    
    data = await state.get_data()
    session_id = data['session_id']
    desc = data['desc']
    orders = await get_orders_sorted(session_id=session_id)
    
    # –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∞–ª–µ—Ä—Ç
    orders = [order for order in orders if order.order_completed == True]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if not orders:
        await callback.answer(text='–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤', show_alert=True)
        # –ï—Å–ª–∏ –∑–∞—à–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ callback completed_orders, –∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
        if callback.data != 'session:completed_orders':
            return await back_to_session_menu_handler(callback, state)
        return None # —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    if callback.data.startswith('completed_orders:page_'):
        page = int(callback.data.split('_')[-1])
    else:
        page = 1
        
    await callback.message.edit_text(text='‚òëÔ∏è <b>–ì–û–¢–û–í–´–ï –ó–ê–ö–ê–ó–´</b>',
                                     reply_markup=kb.choose_order(orders=orders, desc=desc, page=page),
                                     parse_mode='HTML')


# –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
@completed_orders.callback_query(F.data.startswith('completed_orders:order_id_'))
async def issued_order_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split('_')[-1])
    await state.update_data(order_id=order_id)
    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order_items = await get_order_items(order_id)
    order_items_data = group_orders_items(order_items)[0]
    
    # –í—ã–≤–æ–¥–∏–º –æ–¥–∏–Ω –∑–∞–∫–∞–∑
    text = order_message(order_items_data)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.completed_order,
                                     parse_mode='HTML')


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@completed_orders.callback_query(F.data == "completed_orders:change_status")
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    finished_datetime = datetime.now(timezone("Europe/Chisinau"))
    await state.update_data(finished_datetime={
                                'year': finished_datetime.year,
                                'month': finished_datetime.month,
                                'day': finished_datetime.day
                            })
    data = await state.get_data()
    order_id = data['order_id']
    await callback.message.edit_text(text='‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –í–´–î–ê–ß–£ –ó–ê–ö–ê–ó–ê</b>\n\n' \
                                            '–ù–∞–∂–∞–≤ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –¥–∞—Ç–æ–π –≤—ã–¥–∞—á–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å. '\
                                            '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î-–ú–ú-–ì–ì–ì</i>',
                                     reply_markup=kb.change_status(order_id),
                                     parse_mode='HTML')
    await state.set_state(Order.finished_datetime)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
@completed_orders.message(Order.finished_datetime)
async def finished_datetime_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    order_id = data['order_id']
    
    try:
        date_comp = [int(_) for _ in message.text.split('-')]
        if len(date_comp) != 3 or len(str(date_comp[2])) != 4:
            raise ValueError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        finished_datetime = {
            'year': date_comp[2],
            'month': date_comp[1],
            'day': date_comp[0]
        }
        datetime(**finished_datetime)
        await state.update_data(finished_datetime=finished_datetime)
    except:
        try:
            await state.set_state(Order.finished_datetime)
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–û –£–ö–ê–ó–ê–ù–ê –î–ê–¢–ê</b>\n\n' \
                                                    '‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –í–´–î–ê–ß–£ –ó–ê–ö–ê–ó–ê</b>\n\n' \
                                                    '–ù–∞–∂–∞–≤ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –¥–∞—Ç–æ–π –≤—ã–¥–∞—á–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å. '\
                                                    '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î-–ú–ú-–ì–ì–ì</i>',
                                                reply_markup=kb.change_status(order_id),
                                                parse_mode='HTML')
            return None
        except TelegramBadRequest:
            return None
        
    text_date = datetime(**finished_datetime).strftime('%d-%m-%Y')
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=f'–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ <b>{text_date}</b>.',
                                        reply_markup=kb.confirm_change_status(order_id),
                                        parse_mode='HTML')


# –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω–Ω–æ–≥–æ
@completed_orders.callback_query(F.data == "completed_orders:mark_issued")
async def mark_issued_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data['order_id']
    finished_datetime = data['finished_datetime']
    print(datetime(**finished_datetime))
    order_data = {
        'finished_datetime': datetime(**finished_datetime),
        'order_issued': True,
        'order_completed': False
    }
    await change_order_data(order_id=order_id, order_data=order_data)
    await callback.answer(text='–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –í—ã–¥–∞–Ω')
    await completed_orders_list_handler(callback, state)


# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@completed_orders.callback_query(F.data == "completed_orders:issue_all")
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    finished_datetime = datetime.now(timezone("Europe/Chisinau")).strftime('%d-%m-%Y')
    await callback.message.edit_text(text='‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –í–´–î–ê–ß–£ –í–°–ï–• –ó–ê–ö–ê–ó–û–í</b>\n\n' \
                                            '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É –í–°–ï–• –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î-–ú–ú-–ì–ì–ì</i>\n\n' \
                                            f'–°–µ–≥–æ–¥–Ω—è - <b>{finished_datetime}</b>',
                                     reply_markup=kb.issue_all,
                                     parse_mode='HTML')
    await state.set_state(Order.finished_datetime_all)


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
@completed_orders.message(Order.finished_datetime_all)
async def finished_datetime_all_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    finished_datetime = datetime.now(timezone("Europe/Chisinau")).strftime('%d-%m-%Y')
    
    try:
        date_comp = [int(_) for _ in message.text.split('-')]
        if len(date_comp) != 3 or len(str(date_comp[2])) != 4:
            raise ValueError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        finished_datetime = {
            'year': date_comp[2],
            'month': date_comp[1],
            'day': date_comp[0]
        }
        datetime(**finished_datetime)
        await state.update_data(finished_datetime=finished_datetime)
    except:
        try:
            await state.set_state(Order.finished_datetime_all)
            await message.bot.edit_message_text(chat_id=data['chat_id'],
                                                message_id=data['message_id'],
                                                text='‚ùó <b>–ù–ï–í–ï–†–ù–û –£–ö–ê–ó–ê–ù–ê –î–ê–¢–ê</b>\n\n' \
                                                    '‚ùì <b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –í–´–î–ê–ß–£ –í–°–ï–• –ó–ê–ö–ê–ó–û–í</b>\n\n' \
                                                    '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É –í–°–ï–• –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î-–ú–ú-–ì–ì–ì</i>\n\n' \
                                                    f'–°–µ–≥–æ–¥–Ω—è - <b>{finished_datetime}</b>',
                                                reply_markup=kb.issue_all,
                                                parse_mode='HTML')
            return None
        except TelegramBadRequest:
            return None
        
    text_date = datetime(**finished_datetime).strftime('%d-%m-%Y')
    await message.bot.edit_message_text(chat_id=data['chat_id'],
                                        message_id=data['message_id'],
                                        text=f'–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –¥–ª—è –í–°–ï–• –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ <b>{text_date}</b>.',
                                        reply_markup=kb.issue_all_confirmation,
                                        parse_mode='HTML')


# –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω–Ω–æ–≥–æ
@completed_orders.callback_query(F.data == "completed_orders:mark_issued_all")
async def mark_issued_all_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_id = data['session_id']
    orders = await get_orders(session_id)
    orders = [order for order in orders if order.order_completed == True and order.order_issued == False]
    
    for order in orders:
        order_id = order.order_id
        finished_datetime = data['finished_datetime']
        print(datetime(**finished_datetime))
        order_data = {
            'finished_datetime': datetime(**finished_datetime),
            'order_issued': True,
            'order_completed': False
        }
        await change_order_data(order_id=order_id, order_data=order_data)
    await callback.answer(text='–í—Å–µ –∑–∞–∫–∞–∑—ã –≤—ã–¥–∞–Ω—ã', show_alert=True)
    await back_to_session_menu_handler(callback, state)
    
    


# # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
# @completed_orders.callback_query(F.data == 'completed_orders')
# async def completed_orders_list_handler(callback: CallbackQuery, state: FSMContext):
#     # –ï—Å–ª–∏ —Ö–∞–Ω–¥–ª–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ callback, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è
#     if callback.data:
#         await state.update_data(callback_name=callback.data)
    
#     # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–µ—Å—Å–∏–∏
#     data = await state.get_data()
#     session_id = data['session_id']
#     orders_items = await get_orders_items(session_id)
#     orders_items_data = group_orders_items(orders_items)
    
#     # —Ñ–∏–ª—å—Ç—Ä - –µ—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–æ–≥–æ, —Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–Ω –Ω–µ –ø–æ–ø–∞–¥–µ—Ç
#     orders_items_data = [order_items_data for order_items_data in orders_items_data if order_items_data['order_completed']
#                          and not order_items_data['order_issued']]
    
    # # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    # if not orders_items_data:
    #     await callback.answer(text='–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤', show_alert=True)
    #     # –ï—Å–ª–∏ –∑–∞—à–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ callback completed_orders, –∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
    #     if data['callback_name'] != 'completed_orders':
    #         return await back_to_session_menu_handler(callback, state)
    #     return None # —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    

#     messages_sent = 0
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
#     for order_items_data in orders_items_data:
        
#         text = order_message(order_items_data)
        
#         messages_sent += 1
#         if messages_sent != len(orders_items_data):
#             message = await callback.bot.send_message(chat_id=data['chat_id'],
#                                             text=text,
#                                             reply_markup=kb.change_button(order_items_data['order_id']),
#                                             parse_mode='HTML')
#         else:
#             message = await callback.bot.send_message(chat_id=data['chat_id'],
#                                             text=text,
#                                             reply_markup=kb.last_change_button(order_items_data['order_id']),
#                                             parse_mode='HTML')
            
#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
#     await callback.bot.delete_message(chat_id=data['chat_id'], message_id=data['message_id'])
            
#     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     await state.update_data(message_id=message.message_id, messages_sent=messages_sent, from_menu='completed_orders')


