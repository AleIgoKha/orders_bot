from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

import app.main_menu.sessions.session.keyboard as kb
from app.main_menu.main_menu import main_menu_handler 
from app.states import Session
from app.database.requests import get_session, change_session_data, delete_session

session_menu = Router()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
async def session_menu_text(data, state):
    # –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    session_id = data['session_id']
    session_data = await get_session(session_id=session_id)
    await state.clear()
    data_refreshed = {
        'session_id': session_data.session_id,
        'session_name': session_data.session_name,
        'session_descr': session_data.session_descr,
        'session_arch': session_data.session_arch,
        'message_id': data['message_id'],
        'chat_id': data['chat_id']
        }
    await state.update_data(data_refreshed)
    
    
    session_name = data_refreshed['session_name']
    session_descr = data_refreshed['session_descr']
    
    text = f'üìã <b>{session_name.upper()}</b>'
    if session_descr:
        text += f'\n\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:</b>\n<blockquote expandable>{session_descr}</blockquote>'
        
    return text


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–∏
async def session_settings_menu_text(data, state):
    # –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    session_id = data['session_id']
    session_data = await get_session(session_id=session_id)
    await state.clear()
    data_refreshed = {
        'session_id': session_data.session_id,
        'session_name': session_data.session_name,
        'session_descr': session_data.session_descr,
        'session_arch': session_data.session_arch,
        'message_id': data['message_id'],
        'chat_id': data['chat_id']
        }
    await state.update_data(data_refreshed)
    
    session_name = data_refreshed['session_name']
    session_descr = data_refreshed['session_descr']
    session_arch = data_refreshed['session_arch']
    text = f'üõ† <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–∏ - {session_name}</b>.'
    
    # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
    if session_arch:
        text += f'\n\n<b>–°—Ç–∞—Ç—É—Å - –ê–†–•–ò–í</b>'
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if session_descr:
        text += f'\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏</b>\n<blockquote expandable>{session_descr}</blockquote>'
        
    return text


# –ó–∞—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
@session_menu.callback_query(F.data.startswith('session:session_id_'))
async def session_menu_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('session:session_id_'):
        session_id = int(callback.data.split('_')[-1])
        await state.update_data(session_id=session_id,
                                message_id=callback.message.message_id,
                                chat_id=callback.message.chat.id)
    data = await state.get_data()
    text = await session_menu_text(data, state)
    await callback.message.edit_text(text=text,
                                    reply_markup=kb.session_menu,
                                    parse_mode='HTML')
    

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏
@session_menu.callback_query(F.data == 'session:back')
@session_menu.callback_query(F.data == 'back_from_order_download')
@session_menu.callback_query(F.data == 'back_from_order_stats')
@session_menu.callback_query(F.data == 'back_from_order_creation')
@session_menu.callback_query(F.data == 'back_from_order_processing')
@session_menu.callback_query(F.data == 'back_from_order_completed')
async def back_to_session_menu_handler(callback: CallbackQuery, state: FSMContext, bot: Bot = Bot):
    data = await state.get_data()
            
    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    if callback.data == 'back_from_order_download':
        
        # —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω—ã
        redis = bot.redis
        chat_id = callback.message.chat.id
        key = f"chat:{chat_id}:messages"
        message_ids = await redis.lrange(key, 0, -1)  # Get all stored message IDs

        for msg_id in message_ids:
            try:
                await bot.delete_message(chat_id, int(msg_id))
            except Exception:
                pass  # Ignore errors (e.g., message already deleted)

        await redis.delete(key)  # Clear the stored list
        await redis.close()
        
        # –ø–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ id
        text = await session_menu_text(data, state)
        message = await callback.bot.send_message(chat_id=data['chat_id'],
                                        text=text,
                                        reply_markup=kb.session_menu,
                                        parse_mode='HTML')
        message_id = message.message_id
        await redis.rpush(f"chat:{chat_id}:messages", message_id)
        await redis.close()
        
        await state.update_data(message_id=message.message_id)
        
        
        
        
    else:
        data = await state.get_data()
        text = await session_menu_text(data, state)

        await callback.message.edit_text(text=text,
                                        reply_markup=kb.session_menu,
                                        parse_mode='HTML')
        
        
# –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
@session_menu.callback_query(F.data == 'session:settings')
async def settings_handler(callback: CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    text = await session_settings_menu_text(data, state)
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.settings_menu,
                                     parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
@session_menu.callback_query(F.data == 'session:change_name')
async def change_name_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_name = data['session_name']
    await callback.message.edit_text(text=f'‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏.</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ <b>{session_name}</b>',
                                     reply_markup=kb.cancel_change_session,
                                     parse_mode='HTML')
    await state.set_state(Session.change_name)


# –ò–∑–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
@session_menu.callback_query(F.data == 'session:change_descr')
async def change_session_descr_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_descr = data['session_descr']
    
    text = '‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏</b>'
    if session_descr:
        text += f'.\n\n<b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏</b>\n<blockquote expandable>{session_descr}</blockquote>'
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.cancel_change_descr_session,
                                     parse_mode='HTML')
    await state.set_state(Session.change_description)
    
    
# –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
@session_menu.callback_query(F.data == 'session:delete_descr')
async def change_session_descr_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    session_id = data['session_id']
    session_data = {'session_descr': None}
    await change_session_data(session_id=session_id,
                                session_data=session_data)
    await settings_handler(callback, state)


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–ø–∞–¥–∞–µ–º –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
@session_menu.message(Session.change_name)
@session_menu.message(Session.change_description)
@session_menu.message(Session.delete)
async def session_change_data_handler(message: Message, state: FSMContext):
    state_name = str(await state.get_state()).split(':')[-1]
    await state.set_state(None)
    data = await state.get_data()
    session_id = data['session_id']
    message_id = data['message_id']
    chat_id = data['chat_id']
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if state_name == 'change_name':
        session_data = {'session_name': message.text}
        await change_session_data(session_id=session_id,
                                  session_data=session_data)
    elif state_name == 'change_description':
        session_data = {'session_descr': message.text}
        await change_session_data(session_id=session_id,
                                  session_data=session_data)
    elif state_name == 'delete':
        if message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
            await message.bot.edit_message_text(message_id=message_id,
                                                chat_id=chat_id,
                                                text='‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï</b>\n\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ –µ–µ –¥–∞–Ω–Ω—ã–µ.\n\n' \
                                                    '–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –Ω–∞–∂–º–∏—Ç–µ <b>"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"</b>',
                                                reply_markup=kb.confirm_delete_session,
                                                parse_mode='HTML')
        else:
            session_name = data['session_name']
            try:
                await state.set_state(Session.delete)
                await message.bot.edit_message_text(message_id=message_id,
                                                    chat_id=chat_id,
                                                    text=f'‚ùóÔ∏è <b>–ù–ï–í–ï–†–ù–û–ï –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û</b>\n\n–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é - <b>{session_name}</b>. ' \
                                                        '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: <i>–£–î–ê–õ–ò–¢–¨</i>',
                                                    reply_markup=kb.cancel_delete_session,
                                                    parse_mode='HTML')
            except TelegramBadRequest:
                return None
        return None
    
    # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é

    text = await session_settings_menu_text(data, state)

    await message.bot.edit_message_text(message_id=message_id,
                                        chat_id=chat_id,
                                        text=text,
                                        reply_markup=kb.settings_menu,
                                        parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ –ê—Ä—Ö–∏–≤/–í —Ä–∞–±–æ—Ç—É
@session_menu.callback_query(F.data == 'session:status')
async def status_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_status = data['session_arch']
    # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
    status_opt = '<b>–í –†–ê–ë–û–¢–ï</b>'
    status_opt_opp = '<b>–ê–†–•–ò–í</b>'
    if session_status:
        status_opt = '<b>–ê–†–•–ò–í</b>'
        status_opt_opp = '<b>–í –†–ê–ë–û–¢–ï</b>'
    await callback.message.edit_text(text=f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ - {status_opt}. ' \
                                     f'–ï—Å–ª–∏ –≤—ã —Ö–æ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ {status_opt_opp} –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                                     reply_markup=kb.change_status_keyboard(session_status),
                                     parse_mode='HTML')


# –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ
@session_menu.callback_query(F.data == 'session:change_status')
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_status = data['session_arch']
    session_id = data['session_id']
    if session_status:
        session_data = {'session_arch': False}
    else:
        session_data = {'session_arch': True}
    await change_session_data(session_id=session_id, session_data=session_data)
    await callback.answer(text='–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
    await settings_handler(callback, state)
    
    
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—Å–µ—Ö –µ–µ –∑–∞–∫–∞–∑–æ–≤
@session_menu.callback_query(F.data == 'session:delete_session')
async def delete_session_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_name = data['session_name']
    await callback.message.edit_text(text=f'‚ùóÔ∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é - <b>{session_name}</b>. ' \
                                        '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: <i>–£–î–ê–õ–ò–¢–¨</i>',
                                        reply_markup=kb.cancel_delete_session,
                                        parse_mode='HTML')
    await state.set_state(Session.delete)
    

@session_menu.callback_query(F.data == 'session:confirm_delete')
async def confirm_delete_session_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_id = data['session_id']
    await delete_session(session_id)
    await callback.answer(text='–°–µ—Å—Å–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', show_alert=True)
    await main_menu_handler(callback, state)