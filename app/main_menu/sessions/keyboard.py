from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests import get_sessions, get_orders


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã-—Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def choose_session(page: int = 1, sessions_per_page: int = 8):
    sessions = await get_sessions()
    sessions = [session for session in sessions if not session.session_arch]
    session_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * sessions_per_page
    end = start + sessions_per_page
    current_sessions = sessions[start:end]
    
    for session in current_sessions:
        orders = await get_orders(session_id=session.session_id)
        orders_number = len([order for order in orders if not order.order_completed and not order.order_issued])
        text = f"{session.session_name} ({orders_number})"
        callback_data = f"session:session_id_{session.session_id}"
        session_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        
    session_keyboard.adjust(1)
    
    additional_buttons = []
    
    additional_buttons.append(InlineKeyboardButton(text='‚ûï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', callback_data='sessions:new_session'))
    additional_buttons.append(InlineKeyboardButton(text='üóÑ –ê—Ä—Ö–∏–≤ —Å–µ—Å—Å–∏–π', callback_data='sessions:archive'))
    
    session_keyboard.row(*additional_buttons)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"session_page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="session_page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main:menu'))
    
    if end < len(sessions):
        navigation_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"session_page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="session_page_edge")
        )
        
    if navigation_buttons:
        session_keyboard.row(*navigation_buttons)

    return session_keyboard.as_markup()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏
cancel_new_session = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='sessions:choose_session')]
])


# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
new_session_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', callback_data='sessions:confirm_new_session')],
    [InlineKeyboardButton(text='‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏', callback_data='sessions:change_new_session')],
    [InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏', callback_data='sessions:add_session_descr')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', callback_data='sessions:confirm_cancel_new_session')]
])


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
confirm_cancel_new_session = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É', callback_data='sessions:choose_session'),
     InlineKeyboardButton(text='üõí –í–µ—Ä–Ω—É—Ç—å—Å—è —Å–µ—Å—Å–∏–∏', callback_data='sessions:new_session_menu')]
])


# –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
cancel_change_session = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='sessions:new_session_menu')]
])


cancel_change_descr_session = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='sessions:delete_descr')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='sessions:new_session_menu')]
])


# –≤—ã–±–æ—Ä –∞—Ä—Ö–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
async def choose_arch_session(page: int = 1, sessions_per_page: int = 8):
    sessions = await get_sessions()
    sessions = [session for session in sessions if session.session_arch]
    session_keyboard = InlineKeyboardBuilder()

    
    start = (page - 1) * sessions_per_page
    end = start + sessions_per_page
    current_sessions = sessions[start:end]
    
    for session in current_sessions:
        text = f"{session.session_name}"
        callback_data = f"session:session_id_{session.session_id}"
        session_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        
    session_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"arch_session_page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="arch_session_page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='üóÇ –í –º–µ–Ω—é', callback_data='sessions:choose_session'))
    
    if end < len(sessions):
        navigation_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"arch_session_page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="arch_session_page_edge")
        )
        
    if navigation_buttons:
        session_keyboard.row(*navigation_buttons)

    return session_keyboard.as_markup()